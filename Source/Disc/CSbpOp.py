# Add the root folder of ECO to the search path
import os
import sys

test_folder_path, _ = os.path.split(__file__)
root_folder_path, _ = os.path.split(test_folder_path)
sys.path.append(root_folder_path)

# Import the required modules
import numpy as np
import sys

##### Functions to build operators
def tridiag(nn, a, b, c, bc='SAT', k1=-1, k2=0, k3=1): 
    """ Builds a tri-diagonal matrix 
    INPUT: (a,b,c) arrays on three diagonal bands,
            bc is a string that determines what we do to with BC corner values
           (k1,k2,k3) indicate which band to appy them to
    OUTPUT: 2D array (matrix) """ 
    a = np.ones(nn)*a
    b = np.ones(nn)*b
    c = np.ones(nn)*c
    if bc == 'periodic':
        A = (np.diag(a[:-1], k1) + np.diag(b, k2) + np.diag(c[1:], k3) + 
            np.diag(a[-1:], len(c)-1) + np.diag(c[:1], -(len(c)-1)))
            #np.diag(array, which diagonal - 0 is main, 1 is one above, etc)
    else:
        A = np.diag(a[:-1], k1) + np.diag(b, k2) + np.diag(c[1:], k3)
    return A
    
def pentadiag(nn, a, b, c, d, e, bc='SAT', k1=-2, k2=-1, k3=0, k4=1, k5=2): 
    """ Builds a penta-diagonal matrix 
    INPUT:  nn number of nodes (makes matrix size nn x nn) 
            (a,b,c,d,e) arrays on three diagonal bands,
            bc is a string that determines what we do to with BC corner values
           (k1,k2,k3,k4,k5) indicate which band to appy them to
    OUTPUT: 2D array (matrix) """ 
    a = np.ones(nn)*a
    b = np.ones(nn)*b
    c = np.ones(nn)*c
    d = np.ones(nn)*d
    e = np.ones(nn)*e
    if bc == 'periodic':
        A = (np.diag(a[:-2], k1) + np.diag(b[:-1], k2) + np.diag(c, k3) +
            np.diag(d[1:], k4) + np.diag(e[2:], k5) + np.diag(a[-2:], len(c)-2) +
            np.diag(b[-1:], len(c)-1) + np.diag(d[:1], -(len(c)-1)) +
            np.diag(e[:2], -(len(c)-2)))
            #np.diag(array, which diagonal - 0 is main, 1 is one above, etc)
    else:
        A = (np.diag(a[:-2], k1) + np.diag(b[:-1], k2) + np.diag(c, k3) +
            np.diag(d[1:], k4) + np.diag(e[2:], k5))
    return A

def heptadiag(nn, a, b, c, d, e, f, g, bc='SAT', k1=-3, k2=-2, k3=-1, k4=0, 
              k5=1, k6=2, k7=3): 
    """ Builds a hepta-diagonal matrix 
    INPUT: nn number of nodes (makes matrix size nn x nn) 
            (a,b,c,d,e,f,g) arrays on three diagonal bands,
            bc is a string that determines what we do to with BC corner values
            (k1,k2,k3,k4,k5,k6,k7) indicate which band to appy them to
    OUTPUT: 2D array (matrix) """ 
    a = np.ones(nn)*a
    b = np.ones(nn)*b
    c = np.ones(nn)*c
    d = np.ones(nn)*d
    e = np.ones(nn)*e
    f = np.ones(nn)*f
    g = np.ones(nn)*g
    if bc == 'periodic':
        A = (np.diag(a[:-3], k1) + np.diag(b[:-2], k2) + np.diag(c[:-1], k3) +
            np.diag(d, k4) + np.diag(e[1:], k5) + np.diag(f[2:], k6) + 
            np.diag(g[3:], k7) + np.diag(a[-3:], len(d)-3) +
            np.diag(b[-2:], len(d)-2) + np.diag(c[-1:], len(d)-1) +
            np.diag(e[:1], -(len(d)-1)) + np.diag(f[:2], -(len(d)-2)) + 
            np.diag(g[:3], -(len(d)-3)))
            #np.diag(array, which diagonal - 0 is main, 1 is one above, etc)
    else:
        A = (np.diag(a[:-3], k1) + np.diag(b[:-2], k2) + np.diag(c[:-1], k3) +
            np.diag(d, k4) + np.diag(e[1:], k5) + np.diag(f[2:], k6) + 
            np.diag(g[3:], k7))
    return A

def nonadiag(nn, a, b, c, d, e, f, g, h, i, bc='SAT', k1=-4, k2=-3, k3=-2, 
             k4=-1, k5=0, k6=1, k7=2, k8=3, k9=4): 
    """ Builds a nona-diagonal matrix 
    INPUT: nn number of nodes (makes matrix size nn x nn) 
            (a,b,c,d,e,f,g) arrays on three diagonal bands,
            bc is a string that determines what we do to with BC corner values
           (k1,k2,k3,k4,k5,k6,k7) indicate which band to appy them to
    OUTPUT: 2D array (matrix) """ 
    a = np.ones(nn)*a
    b = np.ones(nn)*b
    c = np.ones(nn)*c
    d = np.ones(nn)*d
    e = np.ones(nn)*e
    f = np.ones(nn)*f
    g = np.ones(nn)*g
    h = np.ones(nn)*h
    i = np.ones(nn)*i
    if bc == 'periodic':
        A = (np.diag(a[:-4], k1) + np.diag(b[:-3], k2) + np.diag(c[:-2], k3) +
            np.diag(d[:-1], k4) + np.diag(e, k5) + np.diag(f[1:], k6) + 
            np.diag(g[2:], k7) + np.diag(h[3:], k8) + np.diag(i[4:], k9) +
            np.diag(a[-4:], len(e)-4) + np.diag(b[-3:], len(e)-3) + 
            np.diag(c[-2:], len(e)-2) + np.diag(d[-1:], len(e)-1) + 
            np.diag(f[:1], -(len(e)-1)) + np.diag(g[:2], -(len(e)-2)) + 
            np.diag(h[:3], -(len(e)-3)) + np.diag(i[:4], -(len(e)-4)))
            #np.diag(array, which diagonal - 0 is main, 1 is one above, etc)
    else:
        A = (np.diag(a[:-4], k1) + np.diag(b[:-3], k2) + np.diag(c[:-2], k3) +
            np.diag(d[:-1], k4) + np.diag(e, k5) + np.diag(f[1:], k6) + 
            np.diag(g[2:], k7) + np.diag(h[3:], k8) + np.diag(i[4:], k9))
    return A

        
def CSbpOp(p,nn):
    """ Builds a 1D CSBP first derivative operator on reference element [0,1] 
    for p=1,2,3,4
    INPUT: derivative order, grid size
    OUTPUT: 2D arrays (matrix) H and D """ 
    
    dx = 1/(nn-1)
    E = np.zeros((nn,nn))
    E[0,0] = -1
    E[-1,-1] = 1
    
    if p==1:
        if nn < 3:
            print ( '' )
            print ( 'CSBP_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 3 when p=1' )
            sys.exit ( 'CSBP_SET - Fatal error!' )
      
        H = dx*np.diag(np.ones(nn))
        H[0,0] = dx*0.5
        H[-1,-1] = dx*0.5
        
        Q = tridiag(nn, -1/2, 0, 1/2)
        Q[0,0] = -1/2
        Q[-1,-1] = 1/2

    elif p==2:
        if nn < 9:
            print ( '' )
            print ( 'CSBP_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 9 when p=2' )
            sys.exit ( 'CSBP_SET - Fatal error!' )
                
        H = dx*np.diag(np.ones(nn))
        H[0,0] = dx*17/48
        H[1,1] = dx*59/48
        H[2,2] = dx*43/48
        H[3,3] = dx*49/48
                    
        Q = pentadiag(nn, 1/12, -2/3, 0, 2/3, -1/12)
        Q[0,0] = -1/2
        Q[0,1] = 59/96
        Q[0,2] = -1/12
        Q[0,3] = -1/32
        Q[1,0] = - Q[0,1]
        Q[1,1] = 0
        Q[1,2] = 59/96
        Q[1,3] = 0
        Q[2,0] = -Q[0,2]
        Q[2,1] = -Q[1,2]
        Q[2,3] = 59/96
        Q[3,0] = -Q[0,3]
        Q[3,1] = -Q[1,3]
        Q[3,2] = -Q[2,3]
        
        #bottom portion of the matrices
        for i in range(4):
            for j in range(4):
                Q[-1-i,-1-j] = -Q[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]
  
    elif p==3:
        if nn < 13:
                print ( '' )
                print ( 'CSBP_SET - Fatal error!' )
                print ( '  Illegal value of nn: %d' % ( nn ) )
                print ( '  nn must be at least 13 when p=3' )
                sys.exit ( 'CSBP_SET - Fatal error!' )
                
        H = dx*np.diag(np.ones(nn))
        H[0,0] = dx*13649/43200
        H[1,1] = dx*12013/8640
        H[2,2] = dx*2711/4320
        H[3,3] = dx*5359/4320
        H[4,4] = dx*7877/8640
        H[5,5] = dx*43801/43200

        Q = heptadiag(nn,-1/60,3/20,-3/4,0,3/4,-3/20,1/60)
        q = 5591070156686698065364559/7931626489314500743872000
        Q[0,0] = -1/2
        Q[0,1] = -0.953E3 / 0.16200E5 + q
        Q[0,2] = 0.715489E6 / 0.259200E6 - (4 * q)
        Q[0,3] = -0.62639E5 / 0.14400E5 + (6* q)
        Q[0,4] = 0.147127E6 / 0.51840E5 - (4* q)
        Q[0,5] = -0.89387E5 / 0.129600E6 + q
        Q[1,0] = - Q[0,1]
        Q[1,2] = -0.57139E5 / 0.8640E4 + (10* q)
        Q[1,3] = 0.745733E6 / 0.51840E5 - (20 * q)
        Q[1,4] = -0.18343E5 / 0.1728E4 + (15 * q)
        Q[1,5] = 0.240569E6 / 0.86400E5 - (4 * q)
        Q[2,0] = -Q[0,2]
        Q[2,1] = -Q[1,2]
        Q[2,3] = -0.176839E6 / 0.12960E5 + (20 * q)
        Q[2,4] = 0.242111E6 / 0.17280E5 - (20 * q)
        Q[2,5] = -0.182261E6 / 0.43200E5 + (6 * q)
        Q[3,0] = -Q[0,3]
        Q[3,1] = -Q[1,3]
        Q[3,2] = -Q[2,3]
        Q[3,4] = -0.165041E6 / 0.25920E5 + (10 * q)
        Q[3,5] = 0.710473E6 / 0.259200E6 - (4 * q)
        Q[3,6] = 1/60
        Q[4,0] = -Q[0,4]
        Q[4,1] = -Q[1,4]
        Q[4,2] = -Q[2,4]
        Q[4,3] = -Q[3,4]
        Q[4,5] = q
        Q[4,6] = -3/20
        Q[4,7] = 1/60
        Q[5,0] = -Q[0,5]
        Q[5,1] = -Q[1,5]
        Q[5,2] = -Q[2,5]
        Q[5,3] = -Q[3,5]
        Q[5,4] = -Q[4,5]
        Q[5,6] = 3/4
        Q[5,7] = -3/20
        Q[5,8] = 1/60
        
        #bottom portion of the matrices
        for i in range(6):
            for j in range(6):
                Q[-1-i,-1-j] = -Q[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]
        
    elif p==4:
        if nn < 17:
            print ( '' )
            print ( 'CSBP_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 17 when p=4' )
            sys.exit ( 'CSBP_SET - Fatal error!' )
                
        H = dx*np.diag(np.ones(nn))
        H[0,0] = dx*0.1498139E7 / 0.5080320E7
        H[1,1] = dx*0.1107307E7 / 0.725760E6
        H[2,2] = dx*0.20761E5 / 0.80640E5
        H[3,3] = dx*0.1304999E7 / 0.725760E6
        H[4,4] = dx*0.299527E6 / 0.725760E6
        H[5,5] = dx*0.103097E6 / 0.80640E5
        H[6,6] = dx*0.670091E6 / 0.725760E6
        H[7,7] = dx*0.5127739E7 / 0.5080320E7

        Q = nonadiag(nn,1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280)
        q16 = 0.08314829949122060462305047907908720666335
        q17 = -0.9521334029619388274601963790830716099197E-2
        q47 = -0.3510216710115618609017136924794334791187E-1
        Q[0,0] = -1/2
        Q[0,1] =  0.59065123E8/0.91445760E8 + q16/0.3E1 + 0.2E1/0.3E1*q17
        Q[0,2] = 0.771343E6 / 0.10160640E8 - 0.8E1 / 0.5E1 * q16 - 0.3E1 *q17
        Q[0,3] = -0.8276887E7 / 0.20321280E8 + (3 * q16) + (5 * q17)
        Q[0,4] = 0.17658817E8 / 0.91445760E8 - 0.8E1 / 0.3E1 * q16 - 0.10E2/ 0.3E1 * q17
        Q[0,5] = q16
        Q[0,6] = q17
        Q[0,7] = -0.1394311E7 / 0.182891520E9 - q16 / 0.15E2 - q17 / 0.3E1
        Q[1,0] = - Q[0,1]
        Q[1,2] = q47 / 0.45E2 + 0.14E2 / 0.3E1 * q16 + 0.77E2 / 0.9E1 * q17- 0.14866699E8 /0.130636800E9
        Q[1,3] = 0.18734719E8 / 0.13063680E8 - 0.35E2 / 0.3E1 * q16 - 0.175E3 / 0.9E1 * q17 -q47 / 0.9E1
        Q[1,4] = -0.2642179E7 / 0.3265920E7 + 0.35E2 / 0.3E1 * q16 + 0.140E3 / 0.9E1 * q17 +0.2E1 / 0.9E1 * q47
        Q[1,5] = 0.1736509E7 / 0.13063680E8 - 0.14E2 / 0.3E1 * q16 - 0.14E2 / 0.9E1 * q17 -0.2E1 / 0.9E1 * q47
        Q[1,6] = -0.13219E5 / 0.1244160E7 - 0.35E2 / 0.9E1 * q17 + q47 / 0.9E1
        Q[1,7] = 0.1407281E7 / 0.11430720E9 + q16 / 0.3E1 + 0.13E2 / 0.9E1 * q17 - q47 /0.45E2
        Q[2,0] = -Q[0,2]
        Q[2,1] = -Q[1,2]
        Q[2,3] = -0.3056891E7 / 0.4354560E7 + (14E0 * q16) + 0.7E2 / 0.3E1 * q17 + q47 /0.3E1
        Q[2,4] = 0.765701E6 / 0.653184E6 - 0.56E2 / 0.3E1 * q16 - 0.245E3 / 0.9E1 * q17 -0.8E1 / 0.9E1 * q47
        Q[2,5] = -0.238939E6 / 0.414720E6 + 0.42E2 / 0.5E1 * q16 + 0.7E1 * q17 + q47
        Q[2,6] = 0.754291E6 / 0.21772800E8 + 0.14E2 / 0.3E1 * q17 - 0.8E1 / 0.15E2 * q47
        Q[2,7] = 0.762499E6 / 0.22861440E8 - 0.2E1 / 0.3E1 * q16 - 0.20E2 / 0.9E1 * q17 + q47/ 0.9E1
        Q[3,0] = -Q[0,3]
        Q[3,1] = -Q[1,3]
        Q[3,2] = -Q[2,3]
        Q[3,4] = -0.10064459E8 / 0.26127360E8 + 0.35E2 / 0.3E1 * q16 + 0.175E3 / 0.9E1 * q17+ 0.10E2 / 0.9E1 * q47
        Q[3,5] = 0.62249E5 / 0.77760E5 - (7E0 * q16) - 0.35E2 / 0.3E1 * q17 - 0.5E1 / 0.3E1* q47
        Q[3,6] = q47
        Q[3,7] = -0.8276887E7 / 0.91445760E8 + 0.2E1 / 0.3E1 * q16 + 0.10E2 / 0.9E1 * q17 -0.2E1 / 0.9E1 * q47
        Q[4,0] = -Q[0,4]
        Q[4,1] = -Q[1,4]
        Q[4,2] = -Q[2,4]
        Q[4,3] = -Q[3,4]
        Q[4,5] = 0.792095E6 / 0.2612736E7 + 0.7E1 / 0.3E1 * q16 + 0.70E2 / 0.9E1 * q17 +0.10E2 / 0.9E1 * q47
        Q[4,6] = -0.42403E5 / 0.207360E6 - 0.35E2 / 0.9E1 * q17 - 0.8E1 / 0.9E1 * q47
        Q[4,7] = 0.13906657E8 / 0.182891520E9 - q16 / 0.3E1 + 0.5E1 / 0.9E1 * q17 + 0.2E1 /0.9E1 * q47
        Q[5,0] = -Q[0,5]
        Q[5,1] = -Q[1,5]
        Q[5,2] = -Q[2,5]
        Q[5,3] = -Q[3,5]
        Q[5,4] = -Q[4,5]
        Q[5,6] = 0.1360207E7 / 0.1741824E7 + 0.7E1 / 0.3E1 * q17 + q47 / 0.3E1
        Q[5,7] = -0.289189E6 / 0.1866240E7 + q16 / 0.15E2 - 0.7E1 / 0.9E1 * q17 - q47 / 0.9E1
        Q[6,0] = -Q[0,6]
        Q[6,1] = -Q[1,6]
        Q[6,2] = -Q[2,6]
        Q[6,3] = -Q[3,6]
        Q[6,4] = -Q[4,6]
        Q[6,5] = -Q[5,6]
        Q[6,7] = 0.16676111E8 / 0.21772800E8 + 0.2E1 / 0.9E1 * q17 + q47 / 0.45E2
        Q[7,0] = -Q[0,7]
        Q[7,1] = -Q[1,7]
        Q[7,2] = -Q[2,7]
        Q[7,3] = -Q[3,7]
        Q[7,4] = -Q[4,7]
        Q[7,5] = -Q[5,7]
        Q[7,6] = -Q[6,7]
        
        #bottom portion of the matrices
        for i in range(8):
            for j in range(8):
                Q[-1-i,-1-j] = -Q[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]
        
    else:
        print("ERROR: You have not coded this order p yet")
        sys.exit()
     
    D = np.linalg.inv(H)@Q
    S = Q - E/2
    
    return H, D, Q, S, dx
        
        
def HGTLOp(p,nn):
    """ Builds a 1D HGTL first derivative operator on reference element [0,1] 
    for p=2,3,4
    INPUT: derivative order, grid size
    OUTPUT: 2D arrays (matrix) H and D """ 
    
    dx = 1/(nn-1)
    E = np.zeros((nn,nn))
    E[0,0] = -1
    E[-1,-1] = 1

    if p==2:
        if nn < 9:
            print ( '' )
            print ( 'HGTL_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 9 when p=2' )
            sys.exit ( 'HGTL_SET - Fatal error!' )
                
        H = np.diag(np.ones(nn))
        H[0,0] = 0.3200231481481481
        H[1,1] = 1.190687463256908
        H[2,2] = 0.9836309523809522
        H[3,3] = 1.005658436213992
                    
        D = pentadiag(nn, 1/12, -2/3, 0, 2/3, -1/12)
        D[0,0] = -1.562386980108499
        D[0,1] = 1.955715338174651
        D[0,2] = -0.3747093774218549
        D[0,3] = -0.01861898064429710
        D[1,0] = -0.5256410256410258
        D[1,1] = 0.0
        D[1,2] = 0.5769230769230770
        D[1,3] = -0.05128205128205128
        D[2,0] = 0.1219112455874937
        D[2,1] = -0.6983666722698495
        D[2,3] = 0.6611755477111001
        D[2,4] = -0.08472012102874434
        D[3,0] = 0.005924978687127025
        D[3,1] = 0.06071733041042503
        D[3,2] = -0.6466934599926927
        D[3,4] = 0.6629156010230178
        D[3,5] = -0.08286445012787723
        
        #bottom portion of the matrices
        for i in range(4):
            for j in range(6):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]

        x = np.linspace(0, nn-1, nn, endpoint=True, dtype=np.float64)
        x[1] = 0.9230769230769231
        x[-2] = nn - 1.9230769230769231
        x = x / (nn-1)
  
    elif p==3:
        if nn < 13:
                print ( '' )
                print ( 'HGTL_SET - Fatal error!' )
                print ( '  Illegal value of nn: %d' % ( nn ) )
                print ( '  nn must be at least 13 when p=3' )
                sys.exit ( 'HGTL_SET - Fatal error!' )
                
        H = np.diag(np.ones(nn))
        H[0,0] = 0.23964384800553829484
        H[1,1] = 1.1413495975137771621
        H[2,2] = 1.1140964967090706556
        H[3,3] = 1.0084546102281871184
        H[4,4] = 0.99554237603482965904
        H[5,5] = 1.0009130715085971099

        D = heptadiag(nn,-1/60,3/20,-3/4,0,3/4,-3/20,1/60)
        D[0,0] = -2.0864295251528624183
        D[0,1] = 2.7374848692200391159
        D[0,2] = -0.72250333379125646597
        D[0,3] = -0.027920696644146505545
        D[0,4] = 0.12300916308384004575
        D[0,5] = -0.023640476715613771855
        D[1,0] = -0.57477692141465808502
        D[1,2] = 0.67091771498298926960
        D[1,3] = -0.054319800816258615611
        D[1,4] = -0.056501441643580342822
        D[1,5] = 0.014680448891507773851
        D[2,0] = 0.15541156409522428396
        D[2,1] = -0.68732974766786494723
        D[2,3] = 0.58461354292529653895
        D[2,4] = -0.043595016069415794311
        D[2,5] = -0.0091003432832400813799
        D[3,0] = 0.0066349274572551989597
        D[3,1] = 0.061478109346574163082
        D[3,2] = -0.64585544405848358341
        D[3,4] = 0.68657904802890928860
        D[3,5] = -0.12536357862314390551
        D[3,6] = 0.016526937848888838281
        D[4,0] = -0.029610381125876772034
        D[4,1] = 0.064776647615643478857
        D[4,2] = 0.048786526667361628961
        D[4,3] = -0.69548401247222248717
        D[4,5] = 0.74546156376149528088
        D[4,6] = -0.15067163750220127068
        D[4,7] = 0.016741293055800141186
        D[5,0] = 0.0056601267083825402592
        D[5,1] = -0.016740239398002562802
        D[5,2] = 0.010129411693491519063
        D[5,3] = 0.12630815044373950202
        D[5,4] = -0.74146156899638836890
        D[5,6] = 0.74931582107283734232
        D[5,7] = -0.14986316421456746846
        D[5,8] = 0.016651462690507496496
        
        #bottom portion of the matrices
        for i in range(6):
            for j in range(9):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]

        x = np.linspace(0, nn-1, nn, endpoint=True, dtype=np.float64)
        x[1] = 0.4530911073 / 0.5832340780
        x[2] = 0.3476591521 / 0.1773010470
        x[-3] = nn - 1.0 - 0.3476591521 / 0.1773010470
        x[-2] = nn - 1.0 - 0.4530911073 / 0.5832340780
        x = x / (nn-1)
        
    elif p==4:
        if nn < 17:
            print ( '' )
            print ( 'HGTL_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 17 when p=4' )
            sys.exit ( 'HGTL_SET - Fatal error!' )
                
        H = np.diag(np.ones(nn))
        H[0,0] = 0.19035353672527149344454610246991
        H[1,1] = 1.0081446806710621377827350636811
        H[2,2] = 1.2374845017411721945127873591023
        H[3,3] = 1.0659287478015108902204172073371
        H[4,4] = 0.99651999225515938491716788086284
        H[5,5] = 1.0022226649395695894338418973540
        H[6,6] = 0.99923415650041041189486852032142
        H[7,7] = 1.0001117193658438977936359688723

        # the following were found to minimize the 5th truncation errors
        #s23 = 0.26589278215861395131430290623492
        #s24 = 1.9990910370594855653251073258497
        #s34 = -1.8449986602352241574095446342585

        # the following were found to minimize the 5th and 6th truncation errors
        s23 = 0.85316993781427313331895848140173
        s24 = -0.15937307308786038296471485384826
        s34 = 0.70158910825124005612803124735411

        D = nonadiag(nn,1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280)
        D[0,0] = -2.6266914111589479347039160957122
        D[0,1] = .93475546261615075763759240433093*s23+.15557737222971174534614042357067*s24+2.7264840297541827970070697317685
        D[0,2] = -3.0995373648193297362561901047625*s23+.15557737222971174534614042356967*s34+1.3960698877944513258706008811210
        D[0,3] = -3.0995373648193297362561901047658*s24-.93475546261615075763759240432972*s34+.34145792181176853540343348056701
        D[0,4] = 12.436108544050454970166045103551*s23+8.7974819222771009601100174719328*s24+2.0289212407784876852931753430647*s34-10.471347030137266608803709277949
        D[0,5] = -19.688215166827542741575765517351*s23-10.250723720399292074551481603731*s24-2.1031781348581958704436124639412*s34+16.581264114256043738670065358785
        D[0,6] = 12.175883430423232849671399535208*s23+5.5727114401172732935011637472291*s24+1.0694597681502130359110387829076*s34-10.276694172988258437078654030236
        D[0,7] = -2.7589949054429660996430814209768*s23-1.1755096494054641881496499342429*s24-.21602478368406583846914968126044*s34+2.3294566606680265836351099516598
        D[1,0] = -.17649650064493865976507811293201*s23-.29375449383551690446787598242545e-1*s24-.51480297207263372885846019944293
        D[1,2] = .99192111923296494826088186126679*s23
        D[1,3] = .99192111923296494826088186126679*s24
        D[1,4] = -5.1756662139618756320780127258912*s23-3.0144208723944160294304527751320*s24+3.8668069823599327080825488591357
        D[1,5] = 8.5110895130940913829944955602830*s23+3.6483549838684336085805599214937*s24-6.6408132848906499436069419330692
        D[1,6] = -5.3943505137513430102946121156385*s23-2.0326798654867648728475675297102*s24+4.2848264272099378649754586848312
        D[1,7] = 1.2435025960311009708823255329103*s23+.43620008416333403588336612032391*s24-.99601715260658690059260541145586
        D[2,0] = .47678003140672176211636104236006*s23-.23931372875119669833371291123592e-1*s34-.21474761120920235692446495497041
        D[2,1] = -.80809092848676047633795118106846*s23
        D[2,3] = .80809092848676047633795118106846*s34
        D[2,4] = 3.2303743237769229429463540484833*s23-2.4557660023477802082087889240283*s34-1.0385997416957403722628645499913
        D[2,5] = 2.9490333774694178967511953203268-5.9711368346764346566760148356303*s23+2.9722147348201794890349305629078*s34
        D[2,6] = 4.0460818272382348134830497093950*s23-1.6559685321426860294239019199882*s34-2.2790342513871981782425423058947
        D[2,7] = -.97400841925868438553179878354031*s23+.35536024405864594209318039116553*s34+.58334822682272301067867649051791
        D[3,0] = .55351532719460370024677557436544*s24+.16692861380204102512184507162311*s34-.60977549572417333432915972337310e-1
        D[3,1] = -.93814901048734297006897987090925*s24
        D[3,2] = -.93814901048734297006897987090925*s34
        D[3,4] = 3.7502864696552424466547995586671*s24+4.8950930100125444117751340491729*s34-2.2512172562333994431741888651455
        D[3,5] = -6.9321606213625511671183754056492*s24-8.0497027939609025652063581656574*s34+4.5168642315035433668747425952010
        D[3,6] = 4.6972779037162032455590595545665*s24+5.1019224196083918037114752841981*s34-2.8532338472999670701965067886107
        D[3,7] = -1.1307700687161552552732794110449*s24-1.1760922389747317053331163683951*s34+.64856442160224047992886903088705
        D[4,0] = -2.3755240866790694727466001047483*s23-1.6804798811836541449524170650052*s24-.38756104937262655843738945615709*s34+2.0002187180946412818935678342228
        D[4,1] = 5.2360418286506138282202804342972*s23+3.0495849470425103897392833239640*s24-3.9119143827971753295481583378056
        D[4,2] = -4.0114982053194875947388726207544*s23+3.0495849470425103897392833239623*s34+1.2897393869161576333928072238844
        D[4,3] = -4.0114982053194875947388726207518*s24-5.2360418286506138282202804343138*s34+2.4080171091555907196432850477658
        D[4,5] = 4.2698064169663857750594001464773*s23+7.7793905507355621418947531057804*s24+6.9081613728124453065556072324730*s34-6.5595919633702773072024938071212
        D[4,6] = -4.4009969722946191805872784850031*s23-7.0486565797222232111778872854666*s24-5.8546322013520915029755619663248*s34+6.6095762844331192767974230969056
        D[4,7] = -1.8324612518588762985101741316605+1.2821710186761766447930706297224*s23+1.9116591684472924192351405414830*s24+1.5204887595203761933383413003394*s34
        D[4,8] = -.35839005731799764662569261944493e-2
        D[5,0] = 3.7394099334599741444749831934046*s23+1.9469341319369307107091754753575*s24+.39945953163776943007918689873189*s34-3.1493024234437741046468457254833
        D[5,1] = -8.5613805389827581196247700345467*s23-3.6699126839328607555694769495807*s24+6.6800530687418746726428713667346
        D[5,2] = -3.6412897327121148495780798658020+7.3728020221269584661500637252215*s23-3.6699126839328607555694769495845*s34
        D[5,3] = 7.3728020221269584661500637252286*s24+8.5613805389827581196247700345294*s34-4.8039778012467041235693558784788
        D[5,4] = -4.2455111088741248685211835616044*s23-7.7351256188526721301405121477419*s24-6.8688537573110431241921643529080*s34+6.5222677167542382428940832771524
        D[5,6] = 2.7711159634390369120387886966910*s23+3.2665121988123939760997050726245*s24+2.4137499275010385875947570633297*s34-2.7694126377946285438639630915397
        D[5,7] = -1.0764362711690865345178820191643*s23-1.1812100500907502672489551758845*s24-.83582355687766225753707269411509*s34+1.1272145648606707930971373016305
        D[5,8] = .38010752927379766095616679496678e-1
        D[5,9] = -.35635080869418530714640637028136e-2
        D[6,0] = -2.3194988468498590191649314131790*s23-1.0615983499712044543337959948476*s24-.20373147567909254105160928416451*s34+1.9577043768434276349048336468384
        D[6,1] = 5.4424538440118805512391574044778*s23+2.0508059903342690005024079068809*s24-4.3230357390097049376512135214093
        D[6,2] = -5.0108010433907360841956404471402*s23+2.0508059903342690005024079068831*s34+2.8224311055441727722433760280648
        D[6,3] = -5.0108010433907360841956404471462*s24-5.4424538440118805512391574044781*s34+3.0436749607208729086556727829960
        D[6,4] = 4.3890427886351105658860168520650*s23+7.0295107053130275167799543326915*s24+5.8387295890498281631423118734211*s34-6.5916230594449979503259530274418
        D[6,5] = -2.7794038140782007617789924871973*s23-3.2762816799788068768750027937670*s24-2.4209689681847762076000257773975*s34+2.7776953941292894544456077356290
        D[6,7] = .27820707167180474801439009098622*s23+.26836437769345089812207699618728*s24+.17761870849165213624607268573361*s34+.47875597768680646856102164225588
        D[6,8] = -.20015328609307587726620149785938
        D[6,9] = .38124435446300167098324094830358e-1
        D[6,10] = -.35741658230906406654678838903461e-2
        D[7,0] = .52512577133991221619993842975328*s23+.22373742341595446683655255555890*s24+.41116488086598893685994273146262e-1*s34-.44337078090392319348503541245966
        D[7,1] = -1.2534904884269526519121789387228*s23-.43970367114223557597724139561405*s24+1.0040172260896730288608613251664
        D[7,2] = 1.2051856808180546550386395717153*s23-.43970367114223557597724139561293*s34-.72180375035406038302673514488605
        D[7,3] = 1.2051856808180546550386395717160*s24+1.2534904884269526519121789387239*s34-.69124623619593758275105026505085
        D[7,4] = 1.8258802863225922454933111884453-1.2775663247013542146336713557579*s23-1.9047937773827276706667390331747*s24-1.5150281888728056858123277028882*s34
        D[7,5] = 1.0787083157197323388425958980045*s23+1.1837032416798463778752467191980*s24+.83758773782229245457594331193279*s34-1.1295937876517411379286149983236
        D[7,6] = -.27796295474939234353532360499502*s23-.26812889738889225310645841768388*s24-.17746285432080273838454742530051*s34-.47833588615154414053520804445429
        D[7,8] = .79991063449118285513377251079147
        D[7,9] = -.19997765862279571378344312769787
        D[7,10] = .38090982594818231196846310037689e-1
        D[7,11] = -.35710296182642091747043415660334e-2
        
        #bottom portion of the matrices
        for i in range(8):
            for j in range(12):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]

        x = np.linspace(0, nn-1, nn, endpoint=True, dtype=np.float64)
        x[1] = 0.6487452486638398746130404560359
        x[2] = 1.8235343169889472845488376159703
        x[3] = 2.9826839217825810352609405806810
        x[-4] = nn - 3.9826839217825810352609405806810
        x[-3] = nn - 2.8235343169889472845488376159703
        x[-2] = nn - 1.6487452486638398746130404560359
        x = x / (nn-1)
        
    else:
        print("ERROR: You have not coded this order p yet")
        sys.exit()

    Q = H@D
    D = D / dx 
    H = H * dx
    S = Q - E/2
    
    return H, D, Q, E, S, dx, x

def HGTOp(p,nn):
    """ Builds a 1D HGT first derivative operator on reference element [0,1] 
    for p=2,3,4
    INPUT: derivative order, grid size
    OUTPUT: 2D arrays (matrix) H and D """ 
    
    dx = 1/(nn-1)
    H = np.diag(np.ones(nn))
    tR = np.zeros(nn)
    tL = np.zeros(nn)

    if p==2:
        if nn < 9:
            print ( '' )
            print ( 'HGT_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 9 when p=2' )
            sys.exit ( 'HGT_SET - Fatal error!' )
                
        H[0,0] = 0.5626503937015199
        H[1,1] = 0.92436013078123
        H[2,2] = 1.0190360469826
        H[3,3] = 0.9939534285346701
                    
        D = pentadiag(nn, 1/12, -2/3, 0, 2/3, -1/12)
        D[0,0] = -2.174199764799834
        D[0,1] = 3.145750470689077
        D[0,2] = -1.214022436120709
        D[0,3] = 0.2424717302314663
        D[1,0] = -0.4398787083635645
        D[1,1] = -0.4109380435663456
        D[1,2] = 1.037087099747049
        D[1,3] = -0.1862703478171391
        D[2,0] = 0.07162334465472171
        D[2,1] = -0.6071238279682888
        D[2,2] = -0.07464330351364873
        D[2,3] = 0.6919204163979632
        D[2,4] = -0.08177662957074722
        D[3,0] = -0.007280390946012310
        D[3,1] = 0.1008007196831248
        D[3,2] = -0.6769706855298218
        D[3,3] = -0.003431600235507266
        D[3,4] = 0.6707222366036759
        D[3,5] = -0.08384027957545949

        tL[0] = 1.564170293574442
        tL[1] = -0.8716131523720464
        tL[2] = 0.3900364520048603
        tL[3] = -0.08259359320725589
        
        #bottom portion of the matrices
        for i in range(4):
            for j in range(6):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]
                    tR[-1-i] = tL[i]

        x = np.linspace(0, nn-1, nn, endpoint=True, dtype=np.float64)
        x[0] = 0.2245784979812614
        x[1] = 1.013719374359164
        x[-2] = nn - 2.013719374359164
        x[-1] = nn - 1.224578497981261
        x = x / (nn-1)
  
    elif p==3:
        if nn < 13:
                print ( '' )
                print ( 'HGT_SET - Fatal error!' )
                print ( '  Illegal value of nn: %d' % ( nn ) )
                print ( '  nn must be at least 13 when p=3' )
                sys.exit ( 'HGT_SET - Fatal error!' )
                
        H[0,0] = 0.54142014473072001930173836611
        H[1,1] = 0.949370096821841473047852491486
        H[2,2] = 1.011540202023540414781240380369
        H[3,3] = 0.99615566027321634644907868142300
        H[4,4] = 1.0018871338788028477450136131527
        H[5,5] = 0.99962676227187889867507646745550

        # the following was found to minimize the 5th truncation errors
        #s25 = 0.19900010589499991209888647781978
        # the following was found to minimize the 5th and 6th truncation errors
        #s25 = 0.20047585891519065380879817084185
        # the following was found to minimize specrtral radius + 5th and 6th truncation errors
        s25 = 0.20245523405075086

        D = heptadiag(nn,-1/60,3/20,-3/4,0,3/4,-3/20,1/60)
        D[0,0] = -2.7049617503550327668083068234533
        D[0,1] = 4.8765052210314718123049897499182+.15622943175112049511102065436230*s25
        D[0,2] = -3.7673607592621403642705534198784-.62135813504787286830909607870278*s25
        D[0,3] = 2.2637712390706979391198846361778+.93110417490776868788218601993549*s25
        D[0,4] = -.78162180429996293273360031129464-.62136366873164319708004462055119*s25
        D[0,5] = .11366785381496631238758616876576+.15538819712062688239593402557770*s25
        D[1,0] = -.26205391814421727981890498998939-.89096719849354117979626627252104e-1*s25
        D[1,1] = -1.0283294212357414048630032245992
        D[1,2] = 1.9669233696419914848468153176870+.74379705533298184947348703117863*s25
        D[1,3] = -.87613724332624012618053935976012-1.4302325309584245412521483132088*s25
        D[1,4] = 1.0533299956967780084059776784528*s25+.21197545675850528937717352615896
        D[1,5] = -.12378243694297963361541269594200e-1-.27779780022198119864768976916998*s25
        D[2,0] = -.57477391733418211097105173475449e-1+.33257779644767948077427805840603*s25
        D[2,1] = -.15274724407116754544349087117565-.69808266742604502283697766498345*s25
        D[2,2] = -.74270557961936816582873156470464
        D[2,3] = 1.1657846210567000561680085731653+1.1782639711604606254023266238931*s25
        D[2,4] = -.21599331866546956733589389800559-1.1553913587394230382029602758664*s25
        D[2,5] = .31389130327234335372129343480136e-2+.34263225855732795486333325858039*s25
        D[3,0] = .11376192699834288406917160580572-.50606403922824350815332836483798*s25
        D[3,1] = -.26245383555497989649446686497658+1.3630600623413981290409650477974*s25
        D[3,2] = -.22107395279326175416612548870506-1.1964609778935740233473655222658*s25
        D[3,3] = -.30722942556794146329355274856087
        D[3,4] = .80044834936463836799337534387133+.56161932806694084730600960678567*s25
        D[3,5] = -.14018404870861939576980200861765-.22215437328652144484628076775229*s25
        D[3,6] = .16730986261821257661400161189597e-1
        D[4,0] = -.69646531324362281108793434886904e-1+.33578513594904955768726508178838*s25
        D[4,1] = -.99811642068753112444526985407739*s25+.20086410245390015581593732561825
        D[4,2] = -.13433570208433222705995978402350+1.1665234225643905255501637537446*s25
        D[4,3] = -.57094129105299602358818397077990-.55840648477715738447083620541040*s25
        D[4,4] = -.41405272459176047989951030922332e-1
        D[4,5] = .74854688389197057385698687551528+.54214346951248425678677223863545e-1*s25
        D[4,6] = -.14971746310312966866679047811161
        D[4,7] = .16635273678125518740754497567957e-1
        D[5,0] = .16462857130545811653207970152801e-1-.84161712500864062231840417447245e-1*s25
        D[5,1] = -.51950917564033255483077211999213e-1+.26383139632460807981609071448914*s25
        D[5,2] = .52709555216334795658444276495605e-1-.34671571142529772302246559264631*s25
        D[5,3] = .10402776212534148266596781483149+.22138296487867337482846598623735*s25
        D[5,4] = -.73710725256185131588572056283618-.54336937277119669390250690636539e-1*s25
        D[5,5] = -.10389202163684297899210581520899e-2
        D[5,6] = .75028003281490245954457958696235
        D[5,7] = -.15005600656298049190891591739247
        D[5,8] = .16672889618108943545435101932497e-1

        tL[0] = 1.711444292034235973927557665923
        tL[1] = -1.39732974075793865391110623462
        tL[2] = 1.22578672863772379396817900955
        tL[3] = -0.78236606685361003632735764845843
        tL[4] = 0.28803961446854778628447971413851
        tL[5] = -0.045574827528958863941752506659450
        
        #bottom portion of the matrices
        for i in range(6):
            for j in range(9):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]
                    tR[-1-i] = tL[i]

        x = np.linspace(0, nn-1, nn, endpoint=True, dtype=np.float64)
        x[0] = 0.2180540672543505
        x[1] = 1.001181873031216
        x[2] = 1.997580526418033
        x[-3] = nn - 2.997580526418033
        x[-2] = nn - 2.001181873031216
        x[-1] = nn - 1.218054067254351
        x = x / (nn-1)
        
    elif p==4:
        if nn < 17:
            print ( '' )
            print ( 'HGT_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 17 when p=4' )
            sys.exit ( 'HGT_SET - Fatal error!' )
                
        H[0,0] = 0.49354690239302834210133952488606
        H[1,1] = 0.94261440595460977792117527977023
        H[2,2] = 1.0540850665738545358416756277886
        H[3,3] = 1.0092954425984661226177333403301
        H[4,4] = 1.0008028072873223181299616272547
        H[5,5] = 0.99951761791481031334100199811466
        H[6,6] = 1.0001606906648824196323634805527
        H[7,7] = 0.99997706661302617041474912130282

        D = nonadiag(nn,1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280)

        # the following were found to minimize the 5th and 6th truncation errors
        #s27 = 0.17290895577537852224129503891235
        #s28 = -0.022414474179345697788084646608375
        #s38 = 0.028178137763556144339183195737620

        # the following were found to minimize specrtral radius + 5th and 6th truncation errors
        s27 = 0.23646477026934232
        s28 = -0.03330778146348138
        s38 = 0.05126760268128624

        D[0,0] = -3.1060446679604928518922247872438
        D[0,1] = 6.174532662788581775229255260283+.54257639917418064547275285800225*s27+2.7076341251934734200409123327409*s28
        D[0,2] = -6.74601930955407482959732060893-2.7222287620128702408446958392743*s27-12.762585889832010413777472989088*s28+.16388100903874826539723661903912*s38
        D[0,3] = 5.6017530692329613625472229688171*s27+23.679391585634590425310876678164*s28-.85210279986839306002337759749926*s38+6.9708366246546194076657149057
        D[0,4] = -5.119248100578045516252857474789-5.7427323668525118497891390971337*s27-19.958985567785836906565770987623*s28+1.7338526701606983150567076967582*s38
        D[0,5] = 2.399440035095338985268488320070+2.9052783207644541813689603136716*s27+5.7382708429259330058428887427620*s28-1.7459886029310904746758896796978*s38
        D[0,6] = -.6523961072190800210191012449529-.58464666030621409875510120332516*s27+1.4768675624195473245227495776218*s28+.87587155274093625723260393310341*s38
        D[0,7] = -.88059265855569685537418335161890*s28-.17551382914089930298728096889540*s38+.7889886277315305059804562483504e-1
        D[1,0] = -.19888105031531064167351460705442-.28408954863445510114023370269294*s27-1.4176999914928582427981133471498*s28
        D[1,1] = -1.4151018527727091883098841150684
        D[1,2] = 3.10751060725362055158788341560+3.2795592768151790577595163841186*s27+15.375510513745424180871471633226*s28
        D[1,3] = -2.66301855394573081429055928999-8.5595770199022034101035691168742*s27-37.564629101490743270359247718674*s28
        D[1,4] = 9.6133722980521872378578970469081*s27+37.493747082074488074183929414319*s28+1.74070313965668708808387156075
        D[1,5] = -.734609955079360905746399742619-5.1101441884043939589440494814117*s27-14.947807684909996916468478851420*s28
        D[1,6] = 1.0608791820736861745704388699387*s27+.186171965674245782684072507516
        D[1,7] = 1.0608791820736861745704388699387*s28-.227743004714418723354697277303e-1
        D[2,0] = -.14872434244445732514670736137+1.2746101958010470535979652055971*s27+5.9757366195551018737526988638652*s28-.76732862400770019534909867939115e-1*s38
        D[2,1] = .30625345754273718205099151742-2.9327422591765494261686935980139*s27-13.749533286028708399121097225431*s28
        D[2,2] = -1.8803731437574739017249471399864
        D[2,3] = 2.805590603593282444078889489125+8.1251394382362658042312857305270*s27+38.092974181448123232685191220774*s28+2.2938490505169780316858155931033*s38
        D[2,4] = -1.552120264807679175487896127202-12.091125906477318978692960127117*s27-56.686651408416842194909092129807*s28-6.7752658223502403981323541504280*s38
        D[2,5] = .6061454615182890045136266317515+7.2237703720236772937758914503159*s27+33.867098573011123987363506357256*s28+8.0571894284995355277834464818793*s38
        D[2,6] = -1.5996518404071217467434886615080*s27-7.4996246795687984997712070862871*s28-4.4477298304979203835431155329794*s38-.1615975242011085508831456622555
        D[2,7] = .94869003623241724174111747636862*s38+.2482575255641032259918865507375e-1
        D[3,0] = -2.7392651929277313625274700122278*s27-11.579256057624898448433440888271*s28+.41667947723289470885281923599577*s38+.2926024810685565198409227392
        D[3,1] = -.965573587957640726337263466596+7.9940721688641720516610729035862*s27+35.082849927713283637760089762476*s28
        D[3,2] = 1.278645521499836463360371925214-8.4857097180834345749315601264517*s27-39.783430630254279397910035870161*s28-2.3956434628294401337951616108733*s38
        D[3,3] = -2.2549807931089144579085852442609
        D[3,4] = 8.0838432906085235250476674222475*s27+47.626409808578147711753508662947*s28+11.445677424379280756895755900054*s38+2.329951130943008434831026164316
        D[3,5] = -6.4682969550946654377885220452047*s27-47.737388519248783838819293112526*s28-18.229451955310315923983502355040*s38-.911990165091868102293205576041
        D[3,6] = .2809755122283835923092956511845+1.6153564066331357985388118577632*s27+19.135791861010926713880754821098*s28+11.348678890862999945146862556876*s38
        D[3,7] = -2.7449763901743963782315833751077*s28-2.5859403743354193531167737275224*s38-.4963009958136172380256219338513e-1
        D[4,0] = -.292840435200932615123625880948+2.8320341932439590631876526954754*s27+9.8427936354297250969218443816345*s28-.85505117325077451619891590197018*s38
        D[4,1] = -9.0544342521487584996316714236535*s27-35.313795960042291927714883116910*s28+.98860354995474241742485197846
        D[4,2] = -1.568863556221933851513143416320+12.734851624394969306137400611196*s27+59.704621418528337384933943752115*s28+7.1359777104994558543095042074075*s38
        D[4,3] = -8.1524413525640643035516370522378*s27-48.030559084277786424559571770906*s28-11.542803415180322232156510500127*s38+1.083179656243927455202695275211
        D[4,4] = -1.2955383148389735651761297900506
        D[4,5] = 2.4591942564799089838021081743693*s27+28.939202052883124166544970354056*s28+13.756314032152078689729743796675*s38+1.4505925105629004843367935246562
        D[4,6] = -.45153945503419424181053495997981-.81920446940601454994385300518854*s27-19.261760395918440069943958135257*s28-11.423385830790089668612237030105*s38
        D[4,7] = 4.1194983333973317738176545348761*s28+2.9289486765696518729284154276804*s38+.89974608236946860867281915972563e-1
        D[4,8] = -.35685637024829442081886470371684e-2
        D[5,0] = .1712458404774109770519307534954-1.4345831330059927390651334988761*s27-2.8334726160471826427924475060089*s28+.86214314900011750859838983603671*s38
        D[5,1] = -.572151133136731430560577971253+4.8192202340006748950659948832935*s27+14.096818914137530672974242598682*s28
        D[5,2] = .9027068728303679625826227781046-7.6181433293733128281782883617421*s27-35.716031627807046940866992299958*s28-8.4970618855684362003979258652005*s38
        D[5,3] = 6.5315733521237479485710960434507*s27+48.204381604143622777064902490324*s28+18.407782364002864628318961031366*s38-.731389995964920633988390321930
        D[5,4] = -2.4623563121222737739374841478934*s27-28.976412357394748010036419025166*s28-13.774002033125930910254814405780*s38-.20533790908586981243458360474956
        D[5,5] = -.29974229331160262325331037492280
        D[5,6] = .93008386603741143564223991100032+.16428918837715649754381508192338*s27+7.6890501541098866477102175103718*s28+4.5600705635039171068075540167980*s38
        D[5,7] = -.22995571907440996184773426953571-2.4643340711420625040535037706312*s28-1.5589321578125321330721646135932*s38
        D[5,8] = .38113623424379681994817213547539e-1
        D[5,9] = -.35731521960355951870141137700818e-2
        D[6,0] = -.542610188816290886730560105065e-1+.28850418825872838957608338690392*s27-.72878630152156131658305429097011*s28-.43221423895603154889788371200410*s38
        D[6,1] = -.99983933515245875500287819470834*s27+.175460182016122629962523542949
        D[6,2] = 1.6858982085864680179466148315049*s27+7.9039722850804976548731381009571*s28+4.6875323517926517444056588711587*s38-.2574570836070076701727366238454
        D[6,3] = .1748410074083097427740242779062-1.6301099159408346550575284543712*s27-19.310564488384255695243687101139*s28-11.452329601603306892405587903051*s38
        D[6,4] = .10585247316410527242190786072469+.81973040969930179238669207864244*s27+19.274126705295637857115385771239*s28+11.430719798216482421786299445071*s38
        D[6,5] = -.76317640154738736468727620303073-.16418355545120478984898364794979*s27-7.6841063299082388747888402657004*s28-4.5571385775288975352455797672748*s38
        D[6,6] = -.23083686110295277245496036929678e-1
        D[6,7] = .54535812943792037462705778576791*s28+.32343026807910181035709306592584*s38+.80727413182705766865034737016908
        D[6,8] = -.19996786703049175100057563894167
        D[6,9] = .38089117529617476381062026465080e-1
        D[6,10] = -.35708547684016384107245649811012e-2
        D[7,0] = .43462374629476764351857027380145*s28+.86626293333937217422853426361321e-1*s38+.708725721913312298524519810901e-2
        D[7,1] = -1.0000229339129261295442921169849*s28-.214678760410287250153471181172e-1
        D[7,2] = -1.0000229339129261295442921169849*s38+.2616905518123902518490258529314e-1
        D[7,3] = 2.7705556988693819469622540052334*s28+2.6100376916525091893023744920387*s38-.59913904359821317758229702634e-2
        D[7,4] = -4.1229000487417675120444056488352*s28-2.9313672840916835472999061477215*s38-.47717998373261094985201868001695e-1
        D[7,5] = .20950179677300123455857777498655+2.4632018100945265415857672363079*s28+1.5582158920356180900413436351603*s38
        D[7,6] = -.54545827260398249047789374943467*s28-.32348965901745481992237328874262*s38-.80177370725438950778350405239533
        D[7,7] = -.34549870631862203445395241221729e-3
        D[7,8] = .80001834713034090363543369358792
        D[7,9] = -.20000458678258522590885842339698
        D[7,10] = .38096111768111471601687318742282e-1
        D[7,11] = -.35715104782604504626581861320889e-2

        tL[0] = 1.750987563957142153514947580072
        tL[1] = -1.633337315018924642450708287787
        tL[2] = 1.991016449164237830864665535828
        tL[3] = -2.1335143953729967667712060701979
        tL[4] = 1.6103281544077477681543764222829
        tL[5] = -0.77407713181456979883219585512875
        tL[6] = 0.21488320289480179687711742434175
        tL[7] = -0.026286528217438341356996749420371
        
        #bottom portion of the matrices
        for i in range(8):
            for j in range(12):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]
                    tR[-1-i] = tL[i]

        x = np.linspace(0, nn-1, nn, endpoint=True, dtype=np.float64)
        x[0] = 0.1967602438183434595604104506592
        x[1] = 0.94183500199291982473166500687633
        x[2] = 1.9652033678540906842988129092081
        x[3] = 2.9974783438470417296944521094303
        x[-4] = nn - 3.9974783438470417296944521094303
        x[-3] = nn - 2.9652033678540906842988129092081
        x[-2] = nn - 1.94183500199291982473166500687633
        x[-1] = nn - 1.1967602438183434595604104506592
        x = x / (nn-1)
        
    else:
        print("ERROR: You have not coded this order p yet")
        sys.exit()

    E = np.outer(tR,tR) - np.outer(tL,tL)
    Q = H@D
    D = D / dx 
    H = H * dx
    S = Q - E/2
    
    return H, D, Q, E, S, dx, x, tL, tR

def MattOp(p,nn):
    """ Builds a 1D Mattsson Optimized 'Accurate' first derivative operator on reference element [0,1]
    from 'Boundary optimized diagonal-norm SBP operators' Mattsson, Almquist, van der Weide 2018
    for p=2,3
    INPUT: derivative order, grid size
    OUTPUT: 2D arrays (matrix) H and D """ 
    
    E = np.zeros((nn,nn))
    E[0,0] = -1
    E[-1,-1] = 1

    if p==2:
        if nn < 9:
            print ( '' )
            print ( 'MATTSSON_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 9 when p=2' )
            sys.exit ( 'MATTSSON_SET - Fatal error!' )
                
        H = np.diag(np.ones(nn))
        H[0,0] = 0.21259737557798
        H[1,1] = 1.0260290400758
        H[2,2] = 1.0775123588954
        H[3,3] = 0.98607273802835
                    
        D = pentadiag(nn, 1/12, -2/3, 0, 2/3, -1/12)
        D[0,0] = -2.351863463227944
        D[0,1] = 3.085893212909357
        D[0,2] = -0.9349061508864489
        D[0,3] = 0.2008764012050358
        D[1,0] = -0.6394095807755722
        D[1,2] = 0.7917608885016884
        D[1,3] = -0.1523513077261164
        D[2,0] = 0.1844606165760597
        D[2,1] = -0.7539307161467195
        D[2,3] = 0.6468087329936288
        D[2,4] = -0.07733863342297213
        D[3,0] = -0.04330897109794368
        D[3,1] = 0.1585246807786971
        D[3,2] = -0.7067880256335334
        D[3,4] = 0.6760826468031810
        D[3,5] = -0.08451033085039762
        
        #bottom portion of the matrices
        for i in range(4):
            for j in range(6):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]

        dx1 = 0.68764546205559
        dx2 = 1.114566050522
        dxp = dx1 + dx2
        h = 1.0 / (2.0 * dxp + nn - 2.0 * 2.0 - 1.0)

        x = np.zeros(nn)
        x[:3] = [0.0, dx1 * h, dxp * h]
        j = np.arange(4, nn - 2)
        x[3:nn - 3] = (dxp + j - 3.0) * h
        x[nn - 3:] = [1.0 - dxp * h, 1.0 - dx1 * h, 1.0]
  
    elif p==3:
        if nn < 13:
                print ( '' )
                print ( 'MATTSSON_SET - Fatal error!' )
                print ( '  Illegal value of nn: %d' % ( nn ) )
                print ( '  nn must be at least 13 when p=3' )
                sys.exit ( 'MATTSSON_SET - Fatal error!' )
                
        H = np.diag(np.ones(nn))
        H[0,0] = 0.13030223027124
        H[1,1] = 0.6885150158771499
        H[2,2] = 0.95166202564389
        H[3,3] = 0.99103890475697
        H[4,4] = 1.0028757074552
        H[5,5] = 0.99950151111941

        D = heptadiag(nn,-1/60,3/20,-3/4,0,3/4,-3/20,1/60)
        D[0,0] = -3.8372328620868
        D[0,1] = 5.068376175016301
        D[0,2] = -1.6963756420892
        D[0,3] = 0.58512950738742
        D[0,4] = -0.13275449453717
        D[0,5] = 0.012857316309426
        D[1,0] = -0.95919581160751
        D[1,2] = 1.2687130518352
        D[1,3] = -0.38607319579254
        D[1,4] = 0.083452769545067
        D[1,5] = -0.006896813980236099
        D[2,0] = 0.23226893958753
        D[2,1] = -0.91789728232231
        D[2,3] = 0.8585728949642
        D[2,4] = -0.19840158580452
        D[2,5] = 0.025457033575096
        D[3,0] = -0.076933084507707
        D[3,1] = 0.26822074416546
        D[3,2] = -0.8244592785032399
        D[3,4] = 0.7749305933808099
        D[3,5] = -0.15857634324474
        D[3,6] = 0.016817368709409
        D[4,0] = 0.01724860477538
        D[4,1] = -0.05729372495632099
        D[4,2] = 0.18826984603785
        D[4,3] = -0.76578419520756
        D[4,5] = 0.75051047448733
        D[4,6] = -0.14956988077877
        D[4,7] = 0.016618875642086
        D[5,0] = -0.001676172543796
        D[5,1] = 0.004750928272020101
        D[5,2] = -0.024238574798979
        D[5,3] = 0.15723370478312
        D[5,4] = -0.75304410716804
        D[5,6] = 0.75037405312176
        D[5,7] = -0.15007481062435
        D[5,8] = 0.016674978958261
        
        #bottom portion of the matrices
        for i in range(6):
            for j in range(9):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]

        dx1 = 0.44090263368623
        dx2 = 0.84469580082107
        dx3 = 0.9782969606166001
        dxp = dx1 + dx2 + dx3
        h = 1.0 / (2.0 * dxp + nn - 2.0 * 3.0 - 1.0)

        x = np.zeros(nn)
        x[:4] = [0.0, dx1 * h, (dx1 + dx2) * h, dxp * h]
        j = np.arange(5, nn - 3)
        x[4:nn - 4] = (dxp + j - 4.0) * h
        x[nn - 4:] = [1.0 - dxp * h, 1.0 - (dx1 + dx2) * h, 1.0 - dx1 * h, 1.0]

    elif p ==4:
        if nn < 17:
                print ( '' )
                print ( 'MATTSSON_SET - Fatal error!' )
                print ( '  Illegal value of nn: %d' % ( nn ) )
                print ( '  nn must be at least 17 when p=4' )
                sys.exit ( 'MATTSSON_SET - Fatal error!' )
                
        H = np.diag(np.ones(nn))
        H[0,0] = 1.0758368078310e-01
        H[1,1] = 6.1909685107891e-01
        H[2,2] = 9.6971176519117e-01
        H[3,3] = 1.1023441350947e+00
        H[4,4] = 1.0244688965833e+00
        H[5,5] = 9.9533550116831e-01
        H[6,6] = 1.0008236941028e+00
        H[7,7] = 9.9992060631812e-01

        Q = nonadiag(nn,1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280)
        Q[0,0 ] = -5.0000000000000e-01
        Q[0,1 ] =  6.7284756079369e-01
        Q[0,2 ] = -2.5969732837062e-01
        Q[0,3 ] =  1.3519390385721e-01
        Q[0,4 ] = -6.9678474730984e-02
        Q[0,5 ] =  2.6434024071371e-02
        Q[0,6 ] = -5.5992311465618e-03
        Q[0,7 ] =  4.9954552590464e-04
        Q[0,8 ] =  0.0000000000000e+00
        Q[0,9 ] =  0.0000000000000e+00
        Q[0,10]  =  0.0000000000000e+00
        Q[0,11]  =  0.0000000000000e+00
        Q[1,0 ] = -6.7284756079369e-01
        Q[1,1 ] =  0.0000000000000e+00
        Q[1,2 ] =  9.4074021172233e-01
        Q[1,3 ] = -4.0511642426516e-01
        Q[1,4 ] =  1.9369192209331e-01
        Q[1,5 ] = -6.8638079843479e-02
        Q[1,6 ] =  1.3146457241484e-02
        Q[1,7 ] = -9.7652615479254e-04
        Q[1,8 ] =  0.0000000000000e+00
        Q[1,9 ] =  0.0000000000000e+00
        Q[1,10]  =  0.0000000000000e+00
        Q[1,11]  =  0.0000000000000e+00
        Q[2,0 ] =  2.5969732837062e-01
        Q[2,1 ]= -9.4074021172233e-01
        Q[2,2 ]=  0.0000000000000e+00
        Q[2,3 ]=  9.4316393361096e-01
        Q[2,4 ]= -3.5728039257451e-01
        Q[2,5 ]=  1.1266686855013e-01
        Q[2,6 ]= -1.8334941452280e-02
        Q[2,7 ]=  8.2741521740941e-04
        Q[2,8 ]=  0.0000000000000e+00
        Q[2,9 ]=  0.0000000000000e+00
        Q[2,10] =  0.0000000000000e+00
        Q[2,11] =  0.0000000000000e+00
        Q[3,0 ]= -1.3519390385721e-01
        Q[3,1 ]=  4.0511642426516e-01
        Q[3,2 ]= -9.4316393361096e-01
        Q[3,3 ]=  0.0000000000000e+00
        Q[3,4 ]=  8.7694387866575e-01
        Q[3,5 ]= -2.4698058719506e-01
        Q[3,6 ]=  4.7291642094198e-02
        Q[3,7 ]= -4.0135203618880e-03
        Q[3,8 ]=  0.0000000000000e+00
        Q[3,9 ]=  0.0000000000000e+00
        Q[3,10] =  0.0000000000000e+00
        Q[3,11] =  0.0000000000000e+00
        Q[4,0 ]=  6.9678474730984e-02
        Q[4,1 ]= -1.9369192209331e-01
        Q[4,2 ] =  3.5728039257451e-01
        Q[4,3 ] = -8.7694387866575e-01
        Q[4,4 ] =  0.0000000000000e+00
        Q[4,5 ] =  8.1123946853807e-01
        Q[4,6 ] = -2.0267150541446e-01
        Q[4,7 ] =  3.8680398901392e-02
        Q[4,8 ] = -3.5714285714286e-03
        Q[4,9 ] =  0.0000000000000e+00
        Q[4,10]  =  0.0000000000000e+00
        Q[4,11]  =  0.0000000000000e+00
        Q[5,0 ] = -2.6434024071371e-02
        Q[5,1 ] =  6.8638079843479e-02
        Q[5,2 ] = -1.1266686855013e-01
        Q[5,3 ] =  2.4698058719506e-01
        Q[5,4 ] = -8.1123946853807e-01
        Q[5,5 ] =  0.0000000000000e+00
        Q[5,6 ] =  8.0108544742793e-01
        Q[5,7 ] = -2.0088756283071e-01
        Q[5,8 ] =  3.8095238095238e-02
        Q[5,9 ] = -3.5714285714286e-03
        Q[5,10]  =  0.0000000000000e+00
        Q[5,11]  =  0.0000000000000e+00
        Q[6,0 ] =  5.5992311465618e-03
        Q[6,1 ] = -1.3146457241484e-02
        Q[6,2 ] =  1.8334941452280e-02
        Q[6,3 ] = -4.7291642094198e-02
        Q[6,4 ] =  2.0267150541446e-01
        Q[6,5 ] = -8.0108544742793e-01
        Q[6,6 ] =  0.0000000000000e+00
        Q[6,7 ] =  8.0039405922650e-01
        Q[6,8 ] = -2.0000000000000e-01
        Q[6,9 ] =  3.8095238095238e-02
        Q[6,10]  = -3.5714285714286e-03
        Q[6,11]  =  0.0000000000000e+00
        Q[7,0 ] = -4.9954552590464e-04
        Q[7,1 ] =  9.7652615479254e-04
        Q[7,2 ] = -8.2741521740941e-04
        Q[7,3 ] =  4.0135203618880e-03
        Q[7,4 ] = -3.8680398901392e-02
        Q[7,5 ] =  2.0088756283071e-01
        Q[7,6 ] = -8.0039405922650e-01
        Q[7,7 ] =  0.0000000000000e+00
        Q[7,8 ] =  8.0000000000000e-01
        Q[7,9 ] = -2.0000000000000e-01
        Q[7,10]  =  3.8095238095238e-02
        Q[7,11]  = -3.5714285714286e-03
        
        #bottom portion of the matrices
        for i in range(8):
            for j in range(12):
                Q[-1-i,-1-j] = -Q[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]

        m = 4
        xs = [0.0000000000000e+00,3.8118550247622e-01,1.1899550868338e+00,2.2476300175641e+00,3.3192851303204e+00,4.3192851303204e+00,5.3192851303204e+00,6.3192851303204e+00,7.3192851303204e+00]
        xb = np.zeros(m+1)
        for i in range(0,m+1):
            xb[i] = xs[i]

        L=1.
        h = L/(2*xb[-1] + nn-1-2*m)
        x = h*np.concatenate((xb, np.linspace(xb[-1]+1,L/h-xb[-1]-1,nn-2*(m+1)), L/h-np.flip(xb)))

        D = np.linalg.inv(H)@Q
        
    else:
        print("ERROR: You have not coded this order p yet")
        sys.exit()

    Q = H@D
    D = D / h
    H = H * h
    S = Q - E/2
    h = 1/(nn-1)
    
    return H, D, Q, E, S, h, x
        
        
        

def HGTLOp_DDRF(p,nn):
    """ Builds a 1D HGTL first derivative operator on reference element [0,1] 
    for p=2,3,4
    USES THE VALUES FROM ORIGINAL DDRF PAPER, WHICH ARE WRONG
    https://www.sciencedirect.com/science/article/pii/S0021999116305599
    INPUT: derivative order, grid size
    OUTPUT: 2D arrays (matrix) H and D """ 
    
    dx = 1/(nn-1)
    H = np.diag(np.ones(nn))
    E = np.zeros((nn,nn))
    E[0,0] = -1
    E[-1,-1] = 1

    if p==4:
        if nn < 17:
            print ( '' )
            print ( 'HGT_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 17 when p=4' )
            sys.exit ( 'HGT_SET - Fatal error!' )
                
        H[0,0] = 0.190353545138923978041858004348e0
        H[1,1] = 0.100814468350602098048255215208e1
        H[2,2] = 0.123748445795805474108616072957e1
        H[3,3] = 0.106592880677137158900349848950e1
        H[4,4] = 0.996519951249338559706272381829e0
        H[5,5] = 0.100222268410295824011265193137e1
        H[6,6] = 0.999234151276264447920024045505e0
        H[7,7] = 0.100011171999706746364698226579e1

        Q = nonadiag(nn,1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280)
        Q[0,0] = -0.5
        Q[0,1] = 0.664524773344535302199106187260e0
        Q[0,2] = -0.206255000046912788127070922167e0
        Q[0,3] = 0.158263664050702993500159947411e-2
        Q[0,4] = 0.805222935731168570105544999984e-1
        Q[0,5] = -0.515714993520911946059125511445e-1
        Q[0,6] = 0.119704401808455607689078146516e-1
        Q[0,7] = -0.773644340000767180586628072586e-3
        Q[1,0] = -Q[0,1]
        Q[1,2] = 0.830102913795840978693378107591e0
        Q[1,3] = -0.734311694012783946486430745471e-1
        Q[1,4] = -0.209871800009616876961558876128e0
        Q[1,5] = 0.157637696448831763457134538162e0
        Q[1,6] = -0.441343045750112338113989386335e-1
        Q[1,7] = 0.422143708576906547019443081540e-2
        Q[2,0] = -Q[0,2]
        Q[2,1] = -Q[1,2]
        Q[2,3] = 0.599885646007045623747895379193e0
        Q[2,4] = 0.210081228454899311654583915658e0
        Q[2,5] = -0.277983553417925645607142850031e0
        Q[2,6] = 0.106718775049412674362526742659e0
        Q[2,7] = -0.148541823445037735915560020550e-1
        Q[3,0] = -Q[0,3]
        Q[3,1] = -Q[1,3]
        Q[3,2] = -Q[2,3]
        Q[3,4] = 0.436914318325279982300615063490e0
        Q[3,5] = 0.209987924465003812861293664589e0
        Q[3,6] = -0.146661747338172185957468726465e0
        Q[3,7] = 0.277966177941626498298139025062e-1
        Q[4,0] = -Q[0,4]
        Q[4,1] = -Q[1,4]
        Q[4,2] = -Q[2,4]
        Q[4,3] = -Q[3,4]
        Q[4,5] = 0.555703199380638151547570680464e0
        Q[4,6] = -0.380897987061171569311904978833e-1
        Q[4,7] = 0.360406824058685081638584900871e-2
        Q[4,8] = -0.357142857142857142857142857143e-2
        Q[5,0] = -Q[0,5]
        Q[5,1] = -Q[1,5]
        Q[5,2] = -Q[2,5]
        Q[5,3] = -Q[3,5]
        Q[5,4] = -Q[4,5]
        Q[5,6] = 0.740651501916774757288197800773e0
        Q[5,7] = -0.181401543916127393444778128257e0
        Q[5,8] = 0.380952380952380952380952380952e-1
        Q[5,9] = -0.357142857142857142857142857143e-2
        Q[6,0] = -Q[0,6]
        Q[6,1] = -Q[1,6]
        Q[6,2] = -Q[2,6]
        Q[6,3] = -Q[3,6]
        Q[6,4] = -Q[4,6]
        Q[6,5] = -Q[5,6]
        Q[6,7] = 0.795931057003922891910050385578e0
        Q[6,8] = -0.200000000000000000000000000000e0
        Q[6,9] = 0.380952380952380952380952380952e-1
        Q[6,10] = -0.357142857142857142857142857143e-2
        Q[7,0] = -Q[0,7]
        Q[7,1] = -Q[1,7]
        Q[7,2] = -Q[2,7]
        Q[7,3] = -Q[3,7]
        Q[7,4] = -Q[4,7]
        Q[7,5] = -Q[5,7]
        Q[7,6] = -Q[6,7]
        Q[7,8] = 0.800000000000000000000000000000e0
        Q[7,9] = -0.200000000000000000000000000000e0
        Q[7,10] = 0.380952380952380952380952380952e-1
        Q[7,11] = -0.357142857142857142857142857143e-2
        
        #bottom portion of the matrices
        for i in range(8):
            for j in range(12):
                Q[-1-i,-1-j] = -Q[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]

        x = np.linspace(1, nn, nn, endpoint=True, dtype=np.float64)
        x[1] = 16487452641/10000000000
        x[2] = 1411767151/500000000
        x[3] = 1991341961/500000000
        x[-4] = nn - 1491341961/500000000
        x[-3] = nn - 911767151/500000000
        x[-2] = nn - 6487452641/10000000000
        g = (nn-1)/2
        theta = 1+g
        x = x/g-theta/g
        #dx = 2/(nn-1)
        dx = 1/(nn-1)
        x = 0.5*(x + 1.) # fix to nodal distribution [0,1]
        
    else:
        print("ERROR: You have not coded this order p yet")
        sys.exit()

    D = np.linalg.inv(H)@Q
    D = D / dx 
    H = H * dx
    S = Q - E/2
    
    return H, D, Q, E, S, dx, x

def HGTLOp_DDRF2(p,nn):
    """ Builds a 1D HGTL first derivative operator on reference element [0,1] 
    for p=2,3,4
    USES THE VALUES FROM SECOND DERIVATIVE DDRF PAPER, WHICH ARE ALSO WRONG
    https://epubs.siam.org/doi/10.1137/140992205#supplementary-materials
    INPUT: derivative order, grid size
    OUTPUT: 2D arrays (matrix) H and D """ 
    
    dx = 1/(nn-1)
    H = np.diag(np.ones(nn))
    E = np.zeros((nn,nn))
    E[0,0] = -1
    E[-1,-1] = 1

    if p==4:
        if nn < 17:
            print ( '' )
            print ( 'HGT_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 17 when p=4' )
            sys.exit ( 'HGT_SET - Fatal error!' )
                
        H[0,0] = 0.190353545114720981146105850455
        H[1,1] = 1.00814468361001322878579338853
        H[2,2] = 1.23748445746070721453213596744
        H[3,3] = 1.06592880631025143507305283893
        H[4,4] = 0.996519952430389714672623705058
        H[5,5] = 1.00222268372255478207271906866
        H[6,6] = 0.999234151363896630994667331876
        H[7,7] = 1.00011171998746601272290184905

        D = nonadiag(nn,1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280)
        D[0,0] = -2.62669129539280919314952176709
        D[0,1] = 3.48988804946919111883611187585
        D[0,2] = -1.07609329056030747032533414098
        D[0,3] = -0.0141959344958947354681559533109
        D[0,4] = 0.457041690997071134103762860621
        D[0,5] = -0.298091146776722451000371965430
        D[0,6] = 0.0741178487000497778459520560891
        D[0,7] = -0.00597592194057818084244296574816
        D[1,0] = -0.658945658366373301820700709116
        D[1,2] = 0.820352543006715127845918969775
        D[1,3] = -0.0616561113362300703078556653695
        D[1,4] = -0.226274110826258495913078245350
        D[1,5] = 0.171372325183229993101185636145
        D[1,6] = -0.0501374210247507919792667042525
        D[1,7] = 0.00528843336366753907379671816872
        D[2,0] = 0.165527875115816630488958579266
        D[2,1] = -0.668318741243208460951125523194
        D[2,3] = 0.474015974639523655037337620036
        D[2,4] = 0.192508555600526307627188266873
        D[2,5] = -0.245836658226132689158450929215
        D[2,6] = 0.0958430976294098250570674342460
        D[2,7] = -0.0137401035159352681009754480124
        D[3,0] = 0.00253510970105390036155568852652
        D[3,1] = 0.0583137264775218926507388896451
        D[3,2] = -0.550306359798072613918331263801
        D[3,4] = 0.387071131720088245391974351063
        D[3,5] = 0.225901393889571396731514059015
        D[3,6] = -0.152485287419153885302338607929
        D[3,7] = 0.0289702854289910640848868834812
        D[4,0] = -0.0873033258735444693805740289786
        D[4,1] = 0.228913672337142879656324289805
        D[4,2] = -0.239058279669019072842097927455
        D[4,3] = -0.414031117375316765603565262007
        D[4,5] = 0.540370174358853529869085398556
        D[4,6] = -0.0263191642950773920863965462954
        D[4,7] = 0.00101194123336771655963477701369
        D[4,8] = -0.00358390071640642617241070063883
        D[5,0] = 0.0566168651716227063107497888712
        D[5,1] = -0.172384941348211473270120189642
        D[5,2] = 0.303544360519718637050362555589
        D[5,3] = -0.240260779408972118926334558585
        D[5,4] = -0.537295422656743779260144180490
        D[5,6] = 0.735229145300304861344975710002
        D[5,7] = -0.179896471772569592566525738941
        D[5,8] = 0.0380107522150077344187990214584
        D[5,9] = -0.00356350802015697510176240826173
        D[6,0] = -0.0141194085861392701705353490929
        D[6,1] = 0.0505845145374858970323021274415
        D[6,2] = -0.118695246263746855167009996088
        D[6,3] = 0.162663035662580923012231535745
        D[6,4] = 0.0262476740967460128715611305660
        D[6,5] = -0.737428085447375905205555836250
        D[6,7] = 0.796350533321589671842805716142
        D[6,8] = -0.200153287121953954447872569653
        D[6,9] = 0.0381244356422769437043566799339
        D[6,10] = -0.00357416584146346347228343874380
        D[7,0] = 0.00113741085519141400970041354164
        D[7,1] = -0.00533091041096295399037881006661
        D[7,2] = 0.0170012651637401115072940643790
        D[7,3] = -0.0308768122087187668642407450884
        D[7,4] = -0.00100830698169458999033769627753
        D[7,5] = 0.180276184279075439915490736124
        D[7,6] = -0.795651759147225902829035655216
        D[7,8] = 0.799910633993996260447079117130
        D[7,9] = -0.199977658498499065111769779282
        D[7,10] = 0.0380909825711426790689085293871
        D[7,11] = -0.00357102961604462616271017463004
        
        #bottom portion of the matrices
        for i in range(8):
            for j in range(12):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]

        x = np.linspace(0, nn-1, nn, endpoint=True, dtype=np.float64)
        x[1] = 0.4201521473 / 0.6476381109
        x[2] = 0.3666429902 / 0.2010617441
        x[3] = 0.9061125799 / 0.3037910163
        x[-4] = nn - 1. - 0.9061125799 / 0.3037910163
        x[-3] = nn - 1. - 0.3666429902 / 0.2010617441
        x[-2] = nn - 1. - 0.4201521473 / 0.6476381109
        x = x / (nn-1)
        
    else:
        print("ERROR: You have not coded this order p yet")
        sys.exit()

    Q = H@D
    D = D / dx 
    H = H * dx
    S = Q - E/2
    
    return H, D, Q, E, S, dx, x

def HGTOp_DDRF(p,nn):
    """ Builds a 1D HGTL first derivative operator on reference element [0,1] 
    for p=4
    USES THE VALUES FROM ORIGINAL DDRF PAPER, WHICH ARE WRONG
    https://www.sciencedirect.com/science/article/pii/S0021999116305599
    INPUT: derivative order, grid size
    OUTPUT: 2D arrays (matrix) H and D """ 
    
    dx = 1/(nn-1)
    H = np.diag(np.ones(nn))
    tR = np.zeros(nn)
    tL = np.zeros(nn)

    if p==4:
        if nn < 17:
            print ( '' )
            print ( 'HGT_SET - Fatal error!' )
            print ( '  Illegal value of nn: %d' % ( nn ) )
            print ( '  nn must be at least 17 when p=4' )
            sys.exit ( 'HGT_SET - Fatal error!' )
                
        H[0,0] = 0.4935469023930283
        H[1,1] = 0.9426144059546099
        H[2,2] = 1.054085066573855
        H[3,3] = 1.009295442598466
        H[4,4] = 1.000802807287322
        H[5,5] = 0.9995176179148104
        H[6,6] = 1.000160690664882
        H[7,7] = 0.9999770666130262

        D = nonadiag(nn,1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280)
        D[0,0] = -3.106044667960493
        D[0,1] = 6.180526454135114
        D[0,2] = -6.762331518443771
        D[0,3] = 6.961173256217043
        D[0,4] = -5.037107432688628
        D[0,5] = 2.284935300812669
        D[0,6] = -0.5853135234394218
        D[0,7] = 0.06416213136748800
        D[1,0] = -0.2020193613086322
        D[1,1] = -1.415101852772709
        D[1,2] = 3.108515083761492
        D[1,3] = -2.574424810471354
        D[1,4] = 1.474227647118206
        D[1,5] = -0.4157792256851002
        D[1,6] = 0.009631954823440826
        D[1,7] = 0.01495056453465650
        D[2,0] = -0.1410865905931143
        D[2,1] = 0.3053552055355819
        D[2,2] = -1.880373143757474
        D[2,3] = 2.591426945634568
        D[2,4] = -0.9159049976630367
        D[2,5] = -0.1526372859169159
        D[2,6] = 0.2579971500022937
        D[2,7] = -0.06477728324190289
        D[3,0] = 0.2973278819350951
        D[3,1] = -1.048314216074811
        D[3,2] = 1.502313145596027
        D[3,3] = -2.254980793108914
        D[3,4] = 1.597285443250220
        D[3,5] = 0.1886096413538605
        D[3,6] = -0.3792396959708519
        D[3,7] = 0.09699859301937505
        D[4,0] = -0.3333481874795271
        D[4,1] = 1.239585697758120
        D[4,2] = -2.238950617669327
        D[4,3] = 1.822062615156636
        D[4,4] = -1.295538314838973
        D[4,5] = 0.7711649692542688
        D[4,6] = 0.07876535118068832
        D[4,7] = -0.04017294965940313
        D[4,8] = -0.003568563702482944
        D[5,0] = 0.2277865716277502
        D[5,1] = -0.8728306141197878
        D[5,2] = 1.702914441471244
        D[5,3] = -1.842756468011544
        D[5,4] = 0.4749632466942140
        D[5,5] = -0.2997422933116026
        D[5,6] = 0.7454721566802552
        D[5,7] = -0.1703475122588727
        D[5,8] = 0.03811362342437968
        D[5,9] = -0.003573152196035595
        D[6,0] = -0.08736410095433229
        D[6,1] = 0.3418426033695625
        D[6,2] = -0.6996745034875126
        D[6,3] = 0.8410861488032502
        D[6,4] = -0.4247927958726105
        D[6,5] = -0.5786833918759315
        D[6,6] = -0.02308368611029528
        D[6,7] = 0.7961193303971456
        D[6,8] = -0.1999678670304918
        D[6,9] = 0.03808911752961748
        D[6,10] = -0.003570854768401638
        D[7,0] = 0.01436069216029530
        D[7,1] = -0.05702869278844157
        D[7,2] = 0.1206204432261557
        D[7,3] = -0.1539864556601782
        D[7,4] = 0.08253703011996900
        D[7,5] = 0.1499209774985774
        D[7,6] = -0.7906168574876657
        D[7,7] = -0.0003454987063186220
        D[7,8] = 0.8000183471303409
        D[7,9] = -0.2000045867825852
        D[7,10] = 0.03809611176811148
        D[7,11] = -0.003571510478260450

        tL[0] = 1.750987563957142
        tL[1] = -1.633337315018925
        tL[2] = 1.991016449164238
        tL[3] = -2.133514395372997
        tL[4] = 1.610328154407748
        tL[5] = -0.7740771318145698
        tL[6] = 0.2148832028948018
        tL[7] = -0.02628652821743834
        
        #bottom portion of the matrices
        for i in range(8):
            for j in range(12):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,-1-i] = H[i,j]
                    tR[-1-i] = tL[i]

        x = np.linspace(0, nn-1, nn, endpoint=True, dtype=np.float64)
        x[0] = 0.1967602438183433
        x[1] = 0.9418350019929199
        x[2] = 1.965203367854091
        x[3] = 2.997478343847042
        x[-4] = nn - 3.997478343847042
        x[-3] = nn - 2.965203367854091
        x[-2] = nn - 1.941835001992920
        x[-1] = nn - 1.196760243818343
        x = x / (nn-1)
        
    else:
        print("ERROR: You have not coded this order p yet")
        sys.exit()

    E = np.outer(tR,tR) - np.outer(tL,tL)
    Q = H@D
    D = D / dx 
    H = H * dx
    S = Q - E/2
    
    return H, D, Q, E, S, dx, x