import numpy as np
from scipy.optimize import minimize
import matplotlib.pyplot as plt

fac_spec = 0.0
fac_erp1 = 1.0
fac_erp2 = 1.0
N = 80
op = 'hgtlp4'
maxiter = 10000
tol = 1e-12
x0 = np.array([0.0, 0.0, 0.0])

assert op in ['hgtp4','hgtp3','hgtlp4']

# decided upon the following optimums:
if op == 'hgtp4':
    x1 = np.array([0.23646477026934232,-0.03330778146348138,0.05126760268128624])
elif op == 'hgtp3':
    x1 = np.array([0.20245523405075086])
elif op == 'hgtlp4':
    x1 = np.array([0.85316993781427313331895848140173, -0.15937307308786038296471485384826, 0.70158910825124005612803124735411])
else:
    x1 = x0

def heptadiag(nn, a, b, c, d, e, f, g, bc='SAT', k1=-3, k2=-2, k3=-1, k4=0, 
              k5=1, k6=2, k7=3): 
    """ Builds a hepta-diagonal matrix 
    INPUT: nn number of nodes (makes matrix size nn x nn) 
            (a,b,c,d,e,f,g) arrays on three diagonal bands,
            bc is a string that determines what we do to with BC corner values
            (k1,k2,k3,k4,k5,k6,k7) indicate which band to appy them to
    OUTPUT: 2D array (matrix) """ 
    a = np.ones(nn)*a
    b = np.ones(nn)*b
    c = np.ones(nn)*c
    d = np.ones(nn)*d
    e = np.ones(nn)*e
    f = np.ones(nn)*f
    g = np.ones(nn)*g
    if bc == 'periodic':
        A = (np.diag(a[:-3], k1) + np.diag(b[:-2], k2) + np.diag(c[:-1], k3) +
            np.diag(d, k4) + np.diag(e[1:], k5) + np.diag(f[2:], k6) + 
            np.diag(g[3:], k7) + np.diag(a[-3:], len(d)-3) +
            np.diag(b[-2:], len(d)-2) + np.diag(c[-1:], len(d)-1) +
            np.diag(e[:1], -(len(d)-1)) + np.diag(f[:2], -(len(d)-2)) + 
            np.diag(g[:3], -(len(d)-3)))
            #np.diag(array, which diagonal - 0 is main, 1 is one above, etc)
    else:
        A = (np.diag(a[:-3], k1) + np.diag(b[:-2], k2) + np.diag(c[:-1], k3) +
            np.diag(d, k4) + np.diag(e[1:], k5) + np.diag(f[2:], k6) + 
            np.diag(g[3:], k7))
    return A

def nonadiag(nn, a, b, c, d, e, f, g, h, i, bc='SAT', k1=-4, k2=-3, k3=-2, 
             k4=-1, k5=0, k6=1, k7=2, k8=3, k9=4): 
    """ Builds a nona-diagonal matrix 
    INPUT: nn number of nodes (makes matrix size nn x nn) 
            (a,b,c,d,e,f,g) arrays on three diagonal bands,
            bc is a string that determines what we do to with BC corner values
           (k1,k2,k3,k4,k5,k6,k7) indicate which band to appy them to
    OUTPUT: 2D array (matrix) """ 
    a = np.ones(nn)*a
    b = np.ones(nn)*b
    c = np.ones(nn)*c
    d = np.ones(nn)*d
    e = np.ones(nn)*e
    f = np.ones(nn)*f
    g = np.ones(nn)*g
    h = np.ones(nn)*h
    i = np.ones(nn)*i
    if bc == 'periodic':
        A = (np.diag(a[:-4], k1) + np.diag(b[:-3], k2) + np.diag(c[:-2], k3) +
            np.diag(d[:-1], k4) + np.diag(e, k5) + np.diag(f[1:], k6) + 
            np.diag(g[2:], k7) + np.diag(h[3:], k8) + np.diag(i[4:], k9) +
            np.diag(a[-4:], len(e)-4) + np.diag(b[-3:], len(e)-3) + 
            np.diag(c[-2:], len(e)-2) + np.diag(d[-1:], len(e)-1) + 
            np.diag(f[:1], -(len(e)-1)) + np.diag(g[:2], -(len(e)-2)) + 
            np.diag(h[:3], -(len(e)-3)) + np.diag(i[:4], -(len(e)-4)))
            #np.diag(array, which diagonal - 0 is main, 1 is one above, etc)
    else:
        A = (np.diag(a[:-4], k1) + np.diag(b[:-3], k2) + np.diag(c[:-2], k3) +
            np.diag(d[:-1], k4) + np.diag(e, k5) + np.diag(f[1:], k6) + 
            np.diag(g[2:], k7) + np.diag(h[3:], k8) + np.diag(i[4:], k9))
    return A

def makeD(s):
    H = np.ones(N)
    tR = np.zeros(N)
    tL = np.zeros(N)

    if op == 'hgtp4':
        H[0] = 0.49354690239302834210133952488606
        H[1] = 0.94261440595460977792117527977023
        H[2] = 1.0540850665738545358416756277886
        H[3] = 1.0092954425984661226177333403301
        H[4] = 1.0008028072873223181299616272547
        H[5] = 0.99951761791481031334100199811466
        H[6] = 1.0001606906648824196323634805527
        H[7] = 0.99997706661302617041474912130282

        D = nonadiag(N,1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280)
        s27, s28, s38 = s
        D[0,0] = -3.1060446679604928518922247872438
        D[0,1] = 6.174532662788581775229255260283+.54257639917418064547275285800225*s27+2.7076341251934734200409123327409*s28
        D[0,2] = -6.74601930955407482959732060893-2.7222287620128702408446958392743*s27-12.762585889832010413777472989088*s28+.16388100903874826539723661903912*s38
        D[0,3] = 5.6017530692329613625472229688171*s27+23.679391585634590425310876678164*s28-.85210279986839306002337759749926*s38+6.9708366246546194076657149057
        D[0,4] = -5.119248100578045516252857474789-5.7427323668525118497891390971337*s27-19.958985567785836906565770987623*s28+1.7338526701606983150567076967582*s38
        D[0,5] = 2.399440035095338985268488320070+2.9052783207644541813689603136716*s27+5.7382708429259330058428887427620*s28-1.7459886029310904746758896796978*s38
        D[0,6] = -.6523961072190800210191012449529-.58464666030621409875510120332516*s27+1.4768675624195473245227495776218*s28+.87587155274093625723260393310341*s38
        D[0,7] = -.88059265855569685537418335161890*s28-.17551382914089930298728096889540*s38+.7889886277315305059804562483504e-1
        D[1,0] = -.19888105031531064167351460705442-.28408954863445510114023370269294*s27-1.4176999914928582427981133471498*s28
        D[1,1] = -1.4151018527727091883098841150684
        D[1,2] = 3.10751060725362055158788341560+3.2795592768151790577595163841186*s27+15.375510513745424180871471633226*s28
        D[1,3] = -2.66301855394573081429055928999-8.5595770199022034101035691168742*s27-37.564629101490743270359247718674*s28
        D[1,4] = 9.6133722980521872378578970469081*s27+37.493747082074488074183929414319*s28+1.74070313965668708808387156075
        D[1,5] = -.734609955079360905746399742619-5.1101441884043939589440494814117*s27-14.947807684909996916468478851420*s28
        D[1,6] = 1.0608791820736861745704388699387*s27+.186171965674245782684072507516
        D[1,7] = 1.0608791820736861745704388699387*s28-.227743004714418723354697277303e-1
        D[2,0] = -.14872434244445732514670736137+1.2746101958010470535979652055971*s27+5.9757366195551018737526988638652*s28-.76732862400770019534909867939115e-1*s38
        D[2,1] = .30625345754273718205099151742-2.9327422591765494261686935980139*s27-13.749533286028708399121097225431*s28
        D[2,2] = -1.8803731437574739017249471399864
        D[2,3] = 2.805590603593282444078889489125+8.1251394382362658042312857305270*s27+38.092974181448123232685191220774*s28+2.2938490505169780316858155931033*s38
        D[2,4] = -1.552120264807679175487896127202-12.091125906477318978692960127117*s27-56.686651408416842194909092129807*s28-6.7752658223502403981323541504280*s38
        D[2,5] = .6061454615182890045136266317515+7.2237703720236772937758914503159*s27+33.867098573011123987363506357256*s28+8.0571894284995355277834464818793*s38
        D[2,6] = -1.5996518404071217467434886615080*s27-7.4996246795687984997712070862871*s28-4.4477298304979203835431155329794*s38-.1615975242011085508831456622555
        D[2,7] = .94869003623241724174111747636862*s38+.2482575255641032259918865507375e-1
        D[3,0] = -2.7392651929277313625274700122278*s27-11.579256057624898448433440888271*s28+.41667947723289470885281923599577*s38+.2926024810685565198409227392
        D[3,1] = -.965573587957640726337263466596+7.9940721688641720516610729035862*s27+35.082849927713283637760089762476*s28
        D[3,2] = 1.278645521499836463360371925214-8.4857097180834345749315601264517*s27-39.783430630254279397910035870161*s28-2.3956434628294401337951616108733*s38
        D[3,3] = -2.2549807931089144579085852442609
        D[3,4] = 8.0838432906085235250476674222475*s27+47.626409808578147711753508662947*s28+11.445677424379280756895755900054*s38+2.329951130943008434831026164316
        D[3,5] = -6.4682969550946654377885220452047*s27-47.737388519248783838819293112526*s28-18.229451955310315923983502355040*s38-.911990165091868102293205576041
        D[3,6] = .2809755122283835923092956511845+1.6153564066331357985388118577632*s27+19.135791861010926713880754821098*s28+11.348678890862999945146862556876*s38
        D[3,7] = -2.7449763901743963782315833751077*s28-2.5859403743354193531167737275224*s38-.4963009958136172380256219338513e-1
        D[4,0] = -.292840435200932615123625880948+2.8320341932439590631876526954754*s27+9.8427936354297250969218443816345*s28-.85505117325077451619891590197018*s38
        D[4,1] = -9.0544342521487584996316714236535*s27-35.313795960042291927714883116910*s28+.98860354995474241742485197846
        D[4,2] = -1.568863556221933851513143416320+12.734851624394969306137400611196*s27+59.704621418528337384933943752115*s28+7.1359777104994558543095042074075*s38
        D[4,3] = -8.1524413525640643035516370522378*s27-48.030559084277786424559571770906*s28-11.542803415180322232156510500127*s38+1.083179656243927455202695275211
        D[4,4] = -1.2955383148389735651761297900506
        D[4,5] = 2.4591942564799089838021081743693*s27+28.939202052883124166544970354056*s28+13.756314032152078689729743796675*s38+1.4505925105629004843367935246562
        D[4,6] = -.45153945503419424181053495997981-.81920446940601454994385300518854*s27-19.261760395918440069943958135257*s28-11.423385830790089668612237030105*s38
        D[4,7] = 4.1194983333973317738176545348761*s28+2.9289486765696518729284154276804*s38+.89974608236946860867281915972563e-1
        D[4,8] = -.35685637024829442081886470371684e-2
        D[5,0] = .1712458404774109770519307534954-1.4345831330059927390651334988761*s27-2.8334726160471826427924475060089*s28+.86214314900011750859838983603671*s38
        D[5,1] = -.572151133136731430560577971253+4.8192202340006748950659948832935*s27+14.096818914137530672974242598682*s28
        D[5,2] = .9027068728303679625826227781046-7.6181433293733128281782883617421*s27-35.716031627807046940866992299958*s28-8.4970618855684362003979258652005*s38
        D[5,3] = 6.5315733521237479485710960434507*s27+48.204381604143622777064902490324*s28+18.407782364002864628318961031366*s38-.731389995964920633988390321930
        D[5,4] = -2.4623563121222737739374841478934*s27-28.976412357394748010036419025166*s28-13.774002033125930910254814405780*s38-.20533790908586981243458360474956
        D[5,5] = -.29974229331160262325331037492280
        D[5,6] = .93008386603741143564223991100032+.16428918837715649754381508192338*s27+7.6890501541098866477102175103718*s28+4.5600705635039171068075540167980*s38
        D[5,7] = -.22995571907440996184773426953571-2.4643340711420625040535037706312*s28-1.5589321578125321330721646135932*s38
        D[5,8] = .38113623424379681994817213547539e-1
        D[5,9] = -.35731521960355951870141137700818e-2
        D[6,0] = -.542610188816290886730560105065e-1+.28850418825872838957608338690392*s27-.72878630152156131658305429097011*s28-.43221423895603154889788371200410*s38
        D[6,1] = -.99983933515245875500287819470834*s27+.175460182016122629962523542949
        D[6,2] = 1.6858982085864680179466148315049*s27+7.9039722850804976548731381009571*s28+4.6875323517926517444056588711587*s38-.2574570836070076701727366238454
        D[6,3] = .1748410074083097427740242779062-1.6301099159408346550575284543712*s27-19.310564488384255695243687101139*s28-11.452329601603306892405587903051*s38
        D[6,4] = .10585247316410527242190786072469+.81973040969930179238669207864244*s27+19.274126705295637857115385771239*s28+11.430719798216482421786299445071*s38
        D[6,5] = -.76317640154738736468727620303073-.16418355545120478984898364794979*s27-7.6841063299082388747888402657004*s28-4.5571385775288975352455797672748*s38
        D[6,6] = -.23083686110295277245496036929678e-1
        D[6,7] = .54535812943792037462705778576791*s28+.32343026807910181035709306592584*s38+.80727413182705766865034737016908
        D[6,8] = -.19996786703049175100057563894167
        D[6,9] = .38089117529617476381062026465080e-1
        D[6,10] = -.35708547684016384107245649811012e-2
        D[7,0] = .43462374629476764351857027380145*s28+.86626293333937217422853426361321e-1*s38+.708725721913312298524519810901e-2
        D[7,1] = -1.0000229339129261295442921169849*s28-.214678760410287250153471181172e-1
        D[7,2] = -1.0000229339129261295442921169849*s38+.2616905518123902518490258529314e-1
        D[7,3] = 2.7705556988693819469622540052334*s28+2.6100376916525091893023744920387*s38-.59913904359821317758229702634e-2
        D[7,4] = -4.1229000487417675120444056488352*s28-2.9313672840916835472999061477215*s38-.47717998373261094985201868001695e-1
        D[7,5] = .20950179677300123455857777498655+2.4632018100945265415857672363079*s28+1.5582158920356180900413436351603*s38
        D[7,6] = -.54545827260398249047789374943467*s28-.32348965901745481992237328874262*s38-.80177370725438950778350405239533
        D[7,7] = -.34549870631862203445395241221729e-3
        D[7,8] = .80001834713034090363543369358792
        D[7,9] = -.20000458678258522590885842339698
        D[7,10] = .38096111768111471601687318742282e-1
        D[7,11] = -.35715104782604504626581861320889e-2

        tL[0] = 1.750987563957142153514947580072
        tL[1] = -1.633337315018924642450708287787
        tL[2] = 1.991016449164237830864665535828
        tL[3] = -2.1335143953729967667712060701979
        tL[4] = 1.6103281544077477681543764222829
        tL[5] = -0.77407713181456979883219585512875
        tL[6] = 0.21488320289480179687711742434175
        tL[7] = -0.026286528217438341356996749420371

        #bottom portion of the matrices
        for i in range(8):
            for j in range(12):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i] = H[i]
                    tR[-1-i] = tL[i]

        x = np.linspace(0, N-1, N, endpoint=True, dtype=np.float64)
        x[0] = 0.1967602438183434595604104506592
        x[1] = 0.94183500199291982473166500687633
        x[2] = 1.9652033678540906842988129092081
        x[3] = 2.9974783438470417296944521094303
        x[-4] = N - 3.9974783438470417296944521094303
        x[-3] = N - 2.9652033678540906842988129092081
        x[-2] = N - 1.94183500199291982473166500687633
        x[-1] = N - 1.1967602438183434595604104506592
    
    elif op == 'hgtp3':

        H[0] = 0.54142014473072001930173836611
        H[1] = 0.949370096821841473047852491486
        H[2] = 1.011540202023540414781240380369
        H[3] = 0.99615566027321634644907868142300
        H[4] = 1.0018871338788028477450136131527
        H[5] = 0.99962676227187889867507646745550

        s25 = s[0]
        D = heptadiag(N,-1/60,3/20,-3/4,0,3/4,-3/20,1/60)
        D[0,0] = -2.7049617503550327668083068234533
        D[0,1] = 4.8765052210314718123049897499182+.15622943175112049511102065436230*s25
        D[0,2] = -3.7673607592621403642705534198784-.62135813504787286830909607870278*s25
        D[0,3] = 2.2637712390706979391198846361778+.93110417490776868788218601993549*s25
        D[0,4] = -.78162180429996293273360031129464-.62136366873164319708004462055119*s25
        D[0,5] = .11366785381496631238758616876576+.15538819712062688239593402557770*s25
        D[1,0] = -.26205391814421727981890498998939-.89096719849354117979626627252104e-1*s25
        D[1,1] = -1.0283294212357414048630032245992
        D[1,2] = 1.9669233696419914848468153176870+.74379705533298184947348703117863*s25
        D[1,3] = -.87613724332624012618053935976012-1.4302325309584245412521483132088*s25
        D[1,4] = 1.0533299956967780084059776784528*s25+.21197545675850528937717352615896
        D[1,5] = -.12378243694297963361541269594200e-1-.27779780022198119864768976916998*s25
        D[2,0] = -.57477391733418211097105173475449e-1+.33257779644767948077427805840603*s25
        D[2,1] = -.15274724407116754544349087117565-.69808266742604502283697766498345*s25
        D[2,2] = -.74270557961936816582873156470464
        D[2,3] = 1.1657846210567000561680085731653+1.1782639711604606254023266238931*s25
        D[2,4] = -.21599331866546956733589389800559-1.1553913587394230382029602758664*s25
        D[2,5] = .31389130327234335372129343480136e-2+.34263225855732795486333325858039*s25
        D[3,0] = .11376192699834288406917160580572-.50606403922824350815332836483798*s25
        D[3,1] = -.26245383555497989649446686497658+1.3630600623413981290409650477974*s25
        D[3,2] = -.22107395279326175416612548870506-1.1964609778935740233473655222658*s25
        D[3,3] = -.30722942556794146329355274856087
        D[3,4] = .80044834936463836799337534387133+.56161932806694084730600960678567*s25
        D[3,5] = -.14018404870861939576980200861765-.22215437328652144484628076775229*s25
        D[3,6] = .16730986261821257661400161189597e-1
        D[4,0] = -.69646531324362281108793434886904e-1+.33578513594904955768726508178838*s25
        D[4,1] = -.99811642068753112444526985407739*s25+.20086410245390015581593732561825
        D[4,2] = -.13433570208433222705995978402350+1.1665234225643905255501637537446*s25
        D[4,3] = -.57094129105299602358818397077990-.55840648477715738447083620541040*s25
        D[4,4] = -.41405272459176047989951030922332e-1
        D[4,5] = .74854688389197057385698687551528+.54214346951248425678677223863545e-1*s25
        D[4,6] = -.14971746310312966866679047811161
        D[4,7] = .16635273678125518740754497567957e-1
        D[5,0] = .16462857130545811653207970152801e-1-.84161712500864062231840417447245e-1*s25
        D[5,1] = -.51950917564033255483077211999213e-1+.26383139632460807981609071448914*s25
        D[5,2] = .52709555216334795658444276495605e-1-.34671571142529772302246559264631*s25
        D[5,3] = .10402776212534148266596781483149+.22138296487867337482846598623735*s25
        D[5,4] = -.73710725256185131588572056283618-.54336937277119669390250690636539e-1*s25
        D[5,5] = -.10389202163684297899210581520899e-2
        D[5,6] = .75028003281490245954457958696235
        D[5,7] = -.15005600656298049190891591739247
        D[5,8] = .16672889618108943545435101932497e-1

        tL[0] = 1.711444292034235973927557665923
        tL[1] = -1.39732974075793865391110623462
        tL[2] = 1.22578672863772379396817900955
        tL[3] = -0.78236606685361003632735764845843
        tL[4] = 0.28803961446854778628447971413851
        tL[5] = -0.045574827528958863941752506659450
        
        #bottom portion of the matrices
        for i in range(6):
            for j in range(9):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i] = H[i]
                    tR[-1-i] = tL[i]

        x = np.linspace(0, N-1, N, endpoint=True, dtype=np.float64)
        x[0] = 0.218054067254350502171207770534
        x[1] = 1.00118187303121642581192038320
        x[2] = 1.997580526418032958461002082749
        x[-3] = N - 2.997580526418032958461002082749
        x[-2] = N - 2.00118187303121642581192038320
        x[-1] = N - 1.218054067254350502171207770534

    elif op == 'hgtlp4':

        tL[0] = 1.0
        tR[-1] = 1.0

        H[0] = 0.19035353672527149344454610246991
        H[1] = 1.0081446806710621377827350636811
        H[2] = 1.2374845017411721945127873591023
        H[3] = 1.0659287478015108902204172073371
        H[4] = 0.99651999225515938491716788086284
        H[5] = 1.0022226649395695894338418973540
        H[6] = 0.99923415650041041189486852032142
        H[7] = 1.0001117193658438977936359688723

        s23,s24,s34=s[0],s[1],s[2]

        D = nonadiag(N,1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280)
        D[0,0] = -2.6266914111589479347039160957122
        D[0,1] = .93475546261615075763759240433093*s23+.15557737222971174534614042357067*s24+2.7264840297541827970070697317685
        D[0,2] = -3.0995373648193297362561901047625*s23+.15557737222971174534614042356967*s34+1.3960698877944513258706008811210
        D[0,3] = -3.0995373648193297362561901047658*s24-.93475546261615075763759240432972*s34+.34145792181176853540343348056701
        D[0,4] = 12.436108544050454970166045103551*s23+8.7974819222771009601100174719328*s24+2.0289212407784876852931753430647*s34-10.471347030137266608803709277949
        D[0,5] = -19.688215166827542741575765517351*s23-10.250723720399292074551481603731*s24-2.1031781348581958704436124639412*s34+16.581264114256043738670065358785
        D[0,6] = 12.175883430423232849671399535208*s23+5.5727114401172732935011637472291*s24+1.0694597681502130359110387829076*s34-10.276694172988258437078654030236
        D[0,7] = -2.7589949054429660996430814209768*s23-1.1755096494054641881496499342429*s24-.21602478368406583846914968126044*s34+2.3294566606680265836351099516598
        D[1,0] = -.17649650064493865976507811293201*s23-.29375449383551690446787598242545e-1*s24-.51480297207263372885846019944293
        D[1,2] = .99192111923296494826088186126679*s23
        D[1,3] = .99192111923296494826088186126679*s24
        D[1,4] = -5.1756662139618756320780127258912*s23-3.0144208723944160294304527751320*s24+3.8668069823599327080825488591357
        D[1,5] = 8.5110895130940913829944955602830*s23+3.6483549838684336085805599214937*s24-6.6408132848906499436069419330692
        D[1,6] = -5.3943505137513430102946121156385*s23-2.0326798654867648728475675297102*s24+4.2848264272099378649754586848312
        D[1,7] = 1.2435025960311009708823255329103*s23+.43620008416333403588336612032391*s24-.99601715260658690059260541145586
        D[2,0] = .47678003140672176211636104236006*s23-.23931372875119669833371291123592e-1*s34-.21474761120920235692446495497041
        D[2,1] = -.80809092848676047633795118106846*s23
        D[2,3] = .80809092848676047633795118106846*s34
        D[2,4] = 3.2303743237769229429463540484833*s23-2.4557660023477802082087889240283*s34-1.0385997416957403722628645499913
        D[2,5] = 2.9490333774694178967511953203268-5.9711368346764346566760148356303*s23+2.9722147348201794890349305629078*s34
        D[2,6] = 4.0460818272382348134830497093950*s23-1.6559685321426860294239019199882*s34-2.2790342513871981782425423058947
        D[2,7] = -.97400841925868438553179878354031*s23+.35536024405864594209318039116553*s34+.58334822682272301067867649051791
        D[3,0] = .55351532719460370024677557436544*s24+.16692861380204102512184507162311*s34-.60977549572417333432915972337310e-1
        D[3,1] = -.93814901048734297006897987090925*s24
        D[3,2] = -.93814901048734297006897987090925*s34
        D[3,4] = 3.7502864696552424466547995586671*s24+4.8950930100125444117751340491729*s34-2.2512172562333994431741888651455
        D[3,5] = -6.9321606213625511671183754056492*s24-8.0497027939609025652063581656574*s34+4.5168642315035433668747425952010
        D[3,6] = 4.6972779037162032455590595545665*s24+5.1019224196083918037114752841981*s34-2.8532338472999670701965067886107
        D[3,7] = -1.1307700687161552552732794110449*s24-1.1760922389747317053331163683951*s34+.64856442160224047992886903088705
        D[4,0] = -2.3755240866790694727466001047483*s23-1.6804798811836541449524170650052*s24-.38756104937262655843738945615709*s34+2.0002187180946412818935678342228
        D[4,1] = 5.2360418286506138282202804342972*s23+3.0495849470425103897392833239640*s24-3.9119143827971753295481583378056
        D[4,2] = -4.0114982053194875947388726207544*s23+3.0495849470425103897392833239623*s34+1.2897393869161576333928072238844
        D[4,3] = -4.0114982053194875947388726207518*s24-5.2360418286506138282202804343138*s34+2.4080171091555907196432850477658
        D[4,5] = 4.2698064169663857750594001464773*s23+7.7793905507355621418947531057804*s24+6.9081613728124453065556072324730*s34-6.5595919633702773072024938071212
        D[4,6] = -4.4009969722946191805872784850031*s23-7.0486565797222232111778872854666*s24-5.8546322013520915029755619663248*s34+6.6095762844331192767974230969056
        D[4,7] = -1.8324612518588762985101741316605+1.2821710186761766447930706297224*s23+1.9116591684472924192351405414830*s24+1.5204887595203761933383413003394*s34
        D[4,8] = -.35839005731799764662569261944493e-2
        D[5,0] = 3.7394099334599741444749831934046*s23+1.9469341319369307107091754753575*s24+.39945953163776943007918689873189*s34-3.1493024234437741046468457254833
        D[5,1] = -8.5613805389827581196247700345467*s23-3.6699126839328607555694769495807*s24+6.6800530687418746726428713667346
        D[5,2] = -3.6412897327121148495780798658020+7.3728020221269584661500637252215*s23-3.6699126839328607555694769495845*s34
        D[5,3] = 7.3728020221269584661500637252286*s24+8.5613805389827581196247700345294*s34-4.8039778012467041235693558784788
        D[5,4] = -4.2455111088741248685211835616044*s23-7.7351256188526721301405121477419*s24-6.8688537573110431241921643529080*s34+6.5222677167542382428940832771524
        D[5,6] = 2.7711159634390369120387886966910*s23+3.2665121988123939760997050726245*s24+2.4137499275010385875947570633297*s34-2.7694126377946285438639630915397
        D[5,7] = -1.0764362711690865345178820191643*s23-1.1812100500907502672489551758845*s24-.83582355687766225753707269411509*s34+1.1272145648606707930971373016305
        D[5,8] = .38010752927379766095616679496678e-1
        D[5,9] = -.35635080869418530714640637028136e-2
        D[6,0] = -2.3194988468498590191649314131790*s23-1.0615983499712044543337959948476*s24-.20373147567909254105160928416451*s34+1.9577043768434276349048336468384
        D[6,1] = 5.4424538440118805512391574044778*s23+2.0508059903342690005024079068809*s24-4.3230357390097049376512135214093
        D[6,2] = -5.0108010433907360841956404471402*s23+2.0508059903342690005024079068831*s34+2.8224311055441727722433760280648
        D[6,3] = -5.0108010433907360841956404471462*s24-5.4424538440118805512391574044781*s34+3.0436749607208729086556727829960
        D[6,4] = 4.3890427886351105658860168520650*s23+7.0295107053130275167799543326915*s24+5.8387295890498281631423118734211*s34-6.5916230594449979503259530274418
        D[6,5] = -2.7794038140782007617789924871973*s23-3.2762816799788068768750027937670*s24-2.4209689681847762076000257773975*s34+2.7776953941292894544456077356290
        D[6,7] = .27820707167180474801439009098622*s23+.26836437769345089812207699618728*s24+.17761870849165213624607268573361*s34+.47875597768680646856102164225588
        D[6,8] = -.20015328609307587726620149785938
        D[6,9] = .38124435446300167098324094830358e-1
        D[6,10] = -.35741658230906406654678838903461e-2
        D[7,0] = .52512577133991221619993842975328*s23+.22373742341595446683655255555890*s24+.41116488086598893685994273146262e-1*s34-.44337078090392319348503541245966
        D[7,1] = -1.2534904884269526519121789387228*s23-.43970367114223557597724139561405*s24+1.0040172260896730288608613251664
        D[7,2] = 1.2051856808180546550386395717153*s23-.43970367114223557597724139561293*s34-.72180375035406038302673514488605
        D[7,3] = 1.2051856808180546550386395717160*s24+1.2534904884269526519121789387239*s34-.69124623619593758275105026505085
        D[7,4] = 1.8258802863225922454933111884453-1.2775663247013542146336713557579*s23-1.9047937773827276706667390331747*s24-1.5150281888728056858123277028882*s34
        D[7,5] = 1.0787083157197323388425958980045*s23+1.1837032416798463778752467191980*s24+.83758773782229245457594331193279*s34-1.1295937876517411379286149983236
        D[7,6] = -.27796295474939234353532360499502*s23-.26812889738889225310645841768388*s24-.17746285432080273838454742530051*s34-.47833588615154414053520804445429
        D[7,8] = .79991063449118285513377251079147
        D[7,9] = -.19997765862279571378344312769787
        D[7,10] = .38090982594818231196846310037689e-1
        D[7,11] = -.35710296182642091747043415660334e-2
        
        #bottom portion of the matrices
        for i in range(8):
            for j in range(12):
                D[-1-i,-1-j] = -D[i,j]
                if i == j:
                    H[-1-i,] = H[i]

        x = np.linspace(0, N-1, N, endpoint=True, dtype=np.float64)
        x[1] = 0.6487452486638398746130404560359
        x[2] = 1.8235343169889472845488376159703
        x[3] = 2.9826839217825810352609405806810
        x[-4] = N - 3.9826839217825810352609405806810
        x[-3] = N - 2.8235343169889472845488376159703
        x[-2] = N - 1.6487452486638398746130404560359

    else:
        pass
    
    return D, H, tR, tL, x


def makeLHS(s):
    D, H, tR, tL, _ = makeD(s)
    Hinv = 1/H
    A = - D - Hinv[:,None]*(np.outer(tL,tL)-np.outer(tL,tR))
    return A

def erp1(s):
    if op == 'hgtp4':
        s27, s28, s38 = s
        er = 43912397.955548409640704*s27**2+(-6356978.7065376992009960116+217654144.71587244225638*s28-140096943.869612390196778*s38)*s27+568416162.27701441671556*s28**2+(-10305052.2036423854774811-64573705.01404753418067*s38)*s28+12718480.6142181873645646*s38+254976.5692818785970736+178591486.930944877942142*s38**2
    elif op == 'hgtp3':
        s25 = s[0]
        er = 679.986602800141343819+16998.23558689379655621432*s25**2-6765.3013636400429892828*s25
    elif op == 'hgtlp4':
        s23, s24, s34 = s
        er = 157180077.3970704266057245*s23**2+(254507973.31660611222103476*s24+143200329.1253807584832294000267*s34-328166289.09385799977026375)*s23+131485059.50607671219715263*s24**2+(164185859.8469151045327555974800*s34-290450349.5912381586962125)*s24+53066675.30659253077565639*s34**2+176685622.60596415148997212-170482525.0614478081119658*s34
    else:
        pass
    return er
'''
def derp1(s):
    if op == 'hgtp4':
        s27, s28, s38 = s
        der = [87824795.911096819281408*s27-6356978.7065376992009960116+217654144.71587244225638*s28-140096943.869612390196778*s38,
              217654144.71587244225638*s27+1136832324.55402883343112*s28-10305052.2036423854774811-64573705.01404753418067*s38,
              -140096943.869612390196778*s27-64573705.01404753418067*s28+12718480.6142181873645646+357182973.861889755884284*s38]
    elif op == 'hgtp3':
        s25 = s[0]
        der = [33996.47117398691521163322*s25-6765.3013636113623772981]
    else:
        pass
    return der
'''
def erp2(s):
    if op == 'hgtp4':
        s27, s28, s38 = s
        er = 999475733646.38353*s27**2+(-145660359049.24483+5042556775248.9551*s28-3088222933412.2046*s38)*s27+12817961342800.377*s28**2+(-249884726962.96486-1711143219233.9976*s38)*s28+5845406849.2408612+280243799372.95019*s38+3818437177954.5503*s38**2
    elif op == 'hgtp3':
        s25 = s[0]
        er = 4771081.084264235373956+115222537.25533244378321596*s25**2-46613915.1162021272052529*s25
    elif op == 'hgtlp4':
        s23, s24, s34 = s
        er = 1623758530199.1163450615423*s23**2+(-3378345198264.033133079191243+2618320170691.5171153521677562014*s24+1461951428563.1988744248743628037*s34)*s23+1335447442870.8425375170118564436*s24**2+(-2964519817308.32935832919976+1648708227138.5778956094309195340*s34)*s24+1809134706321.673291971625998-1723074818810.8542642827268741*s34+526454576278.86553883840267*s34**2
    else:
        pass
    return er
'''
def derp2(s):
    if op == 'hgtp4':
        s27, s28, s38 = s
        der = [1998951467292.7670514925466512726*s27-145660359049.24482770379952223864+5042556775248.9550709780658395227*s28-3088222933412.2046418695568320955*s38,
               5042556775248.9550709780658395227*s27+25635922685600.754163355738377636*s28-249884726962.96486304528790914029-1711143219233.99763714119*s38,
               -3088222933412.2046418695568320955*s27-1711143219233.99763714119*s28+280243799372.95019178753190280975+7636874355909.1006560521990*s38]
    elif op == 'hgtp3':
        s25 = s[0]
        der = [230445073.75900815197719504*s25-46613915.1159408040420209]
    else:
        pass
    return der    
'''
def spectral_radius(s):
    A = makeLHS(s)
    # Compute the eigenvalues of A
    eigenvalues = np.linalg.eigvals(A)
    # Return the maximum absolute value (spectral radius)
    return np.max(np.abs(eigenvalues))

def tot_opz(s,min_spec,min_erp1,min_erp2):
    spec_rad = spectral_radius(s)/min_spec
    erp1_val = erp1(s)/min_erp1
    erp2_val = erp2(s)/min_erp2
    return fac_spec*spec_rad + fac_erp1*erp1_val + fac_erp2*erp2_val

def plot_eigs(A, plot_hull=True, plot_individual_eigs=False, labels=None, savefile=None,
              save_format='png', dpi=600, line_width=1.5, equal_axes=False, 
              title_size=12, legend_size=12, markersize=16, markeredge=2,
              tick_size=12, serif=True,
              colors=None, markers=None, linestyles=None, legend_loc='best', 
              legend_anchor=None, legend_anchor_type=None, legend_alpha=None):
    if plot_hull:
        from scipy.spatial import ConvexHull

    if serif:
        plt.rcParams['font.family'] = 'serif'
    else:
        plt.rcParams['font.family'] = 'sans-serif'

    # Define colors and linestyles for the hulls
    if colors is None:
        colors = ['tab:blue', 'tab:orange', 'tab:green', 'k', 'm', 'tab:red', 'tab:brown']
    if markers is None:
        markers = ['o', '^', 's', 'd','x', '+']
    if linestyles is None:
        linestyles = ['-', '--', '-.', ':', (0, (1, 1)), (0, (3, 5, 1, 5)), (0, (1, 2, 3, 2))]
    
    # Check if A is a list of matrices or a single matrix
    if isinstance(A, list):
        if labels is None:
            labels = [f'A{i+1}' for i in range(len(A))]
        elif len(labels) != len(A):
            raise ValueError("Length of labels must match the number of matrices in A.")
        
        print(f"Calculating eigenvalues for {', '.join(labels)}")
        
        eig_values_list = [np.linalg.eigvals(matrix) for matrix in A]
    else:
        # Single matrix case
        if labels is not None:
            raise ValueError("Labels should be None when A is a single matrix.")
        
        print("Calculating eigenvalues for matrix A")
        eig_values_list = [np.linalg.eigvals(A)]
        labels = ["A"]  # Default label for a single matrix
    
    plt.figure(figsize=(6, 6))
    
    # Loop through each matrix's eigenvalues
    for idx, (eig_values, label) in enumerate(zip(eig_values_list, labels)):
        real_part = eig_values.real
        imag_part = eig_values.imag
        
        # Check if eigenvalues are all purely imaginary (within tolerance)
        if np.all(np.abs(real_part) < 1e-12):
            # Plot a line along the imaginary axis
            plt.plot(np.zeros_like(imag_part), imag_part, color=colors[idx % len(colors)], 
                     linestyle=linestyles[idx % len(linestyles)], linewidth=line_width)
        else:
            # Plot individual eigenvalues as scatter if plot_individual_eigs is True
            if plot_individual_eigs:
                if markers[idx % len(markers)] in ['x', '+', '|', '_']:  # Markers without a face color
                    plt.scatter(real_part, imag_part, s=markersize,
                                marker=markers[idx % len(markers)], facecolors=colors[idx % len(colors)],
                                linewidths=markeredge)
                else:
                    plt.scatter(real_part, imag_part, s=markersize,
                                marker=markers[idx % len(markers)], facecolors='none', edgecolors=colors[idx % len(colors)], 
                                linewidths=markeredge)
            
            # Plot convex hull around the outermost eigenvalues
            if plot_hull and len(eig_values) > 2:  # ConvexHull needs at least 3 points
                points = np.column_stack((real_part, imag_part))
                hull = ConvexHull(points)
                
                # Plot the convex hull with unique color and linestyle
                #for simplex in hull.simplices:
                #    plt.plot(points[simplex, 0], points[simplex, 1], color=colors[idx % len(colors)], 
                #             linestyle=linestyles[idx % len(linestyles)], linewidth=line_width)
                
                # Extract the vertices of the convex hull and add the first point at the end to close the loop
                hull_vertices = np.append(hull.vertices, hull.vertices[0])

                # Plot the convex hull as a single continuous line
                plt.plot(points[hull_vertices, 0], points[hull_vertices, 1], 
                        color=colors[idx % len(colors)], 
                        linestyle=linestyles[idx % len(linestyles)], 
                        linewidth=line_width)
                
            # Add a dummy artist to create a combined legend entry for both scatter and hull
            if plot_individual_eigs and plot_hull:
                plt.plot([], [], color=colors[idx % len(colors)], linestyle=linestyles[idx % len(linestyles)], 
                        linewidth=line_width, marker=markers[idx % len(markers)], markersize=np.sqrt(markersize),
                        markerfacecolor='none', markeredgewidth=markeredge, label=label)
            elif plot_individual_eigs:
                if markers[idx % len(markers)] in ['x', '+', '|', '_']:  # Markers without a face color
                    plt.scatter([], [], s=markersize,
                                marker=markers[idx % len(markers)], facecolors=colors[idx % len(colors)],
                                linewidths=markeredge, label=label)
                else:
                    plt.scatter([], [], s=markersize,
                                marker=markers[idx % len(markers)], facecolors='none', edgecolors=colors[idx % len(colors)], 
                                linewidths=markeredge, label=label)
            elif plot_hull:
                plt.plot([], [], color=colors[idx % len(colors)], linestyle=linestyles[idx % len(linestyles)], 
                        linewidth=line_width, label=label)
    
    # Add grid and labels
    plt.axhline(0, color='black', linewidth=0.5)
    plt.axvline(0, color='black', linewidth=0.5)
    plt.xlabel('Real Part', fontsize=title_size)
    plt.ylabel('Imaginary Part', fontsize=title_size)
    plt.gca().tick_params(axis='both', labelsize=tick_size) 
    plt.grid(True)
    
    # Fix axes ratio if equal_axes is True
    if equal_axes:
        #plt.gca().set_aspect('equal', adjustable='box')
        plt.gca().set_aspect('equal', adjustable='datalim')

    # Show legend only if A is a list
    if isinstance(A, list):
        # Create a blended transform
        from matplotlib.transforms import blended_transform_factory
        if legend_anchor_type == 'data' or legend_anchor_type == ('data','data'):
            bbox_transform = plt.gca().transData
        elif legend_anchor_type == 'fig' or legend_anchor_type == ('fig','fig'):
            bbox_transform = plt.gcf().transFigure
        elif legend_anchor_type == ('data','fig'):
            bbox_transform = blended_transform_factory(plt.gca().transData, plt.gcf().transFigure)
        elif legend_anchor_type == ('fig','data'):
            bbox_transform = blended_transform_factory(plt.gcf().transFigure, plt.gca().transData)
        elif legend_anchor_type == None:
            bbox_transform = plt.gca().transData
        else:
            print("Invalid legend_anchor_type. Try of the format ('data','fig'). Using default 'data' type.")
            bbox_transform = plt.gca().transData
        
        legend = plt.legend(fontsize=legend_size,loc=legend_loc, 
                   bbox_to_anchor=legend_anchor, bbox_transform=bbox_transform)
        
        if legend_alpha is not None:
            legend.get_frame().set_alpha(legend_alpha)

    # Save the plot if a savefile is provided
    if savefile is not None:
        plt.savefig(savefile, format=save_format, dpi=dpi, bbox_inches="tight")
        print(f"Plot saved to {savefile}")
    else:
        plt.show()

if __name__ == '__main__':    
    # Use scipy.optimize.minimize to minimize the spectral radius.
    # Here we use the Nelder-Mead method, which does not require derivatives.
    result1 = minimize(spectral_radius, x0, method='Nelder-Mead')
    result2 = minimize(erp1, x0, method='Nelder-Mead')
    result3 = minimize(erp2, x0, method='Nelder-Mead')
    #result2 = minimize(erp1, x0, jac=derp1, method='CG')
    #result3 = minimize(erp2, x0, jac=derp2, method='CG')
    min_spec = result1.fun
    min_erp1 = result2.fun
    min_erp2 = result3.fun

    min_func = lambda x: tot_opz(x,min_spec,min_erp1,min_erp2) 
    result4 = minimize(min_func, x0, method='Nelder-Mead', tol=tol, options={'maxiter': maxiter, 'disp': True})
    
    # Print the optimal parameters and the corresponding minimum spectral radius
    x = result4.x
    print("Optimal values:", x)
    print("Minimum spectral radius:", spectral_radius(x), f"({spectral_radius(x)/min_spec:.4g})")
    print("Minimum Error p+1:", erp1(x), f"({erp1(x)/min_erp1:.4g})")
    print("Minimum Error p+2:", erp2(x), f"({erp2(x)/min_erp2:.4g})")

    A1 = makeLHS(result1.x)
    A2 = makeLHS(result2.x)
    A3 = makeLHS(result3.x)
    A4 = makeLHS(x)
    A5 = makeLHS(x1)
    labels = ['Spectral Radius', 'ER p+1', 'ER p+2', 'Total', 'Final']
    plot_eigs([A1,A2,A3,A4,A5],plot_individual_eigs=True,plot_hull=False,labels=labels,markersize=50)
